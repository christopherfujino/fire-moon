// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _lua_ident =
      _lookup<ffi.Pointer<ffi.Int8>>('lua_ident');

  ffi.Pointer<ffi.Int8> get lua_ident => _lua_ident.value;

  set lua_ident(ffi.Pointer<ffi.Int8> value) => _lua_ident.value = value;

  ffi.Pointer<lua_State> lua_newstate(
    ffi.Pointer<ffi.NativeFunction<lua_Alloc>> f,
    ffi.Pointer<ffi.Void> ud,
  ) {
    return _lua_newstate(
      f,
      ud,
    );
  }

  late final _lua_newstate_ptr =
      _lookup<ffi.NativeFunction<_c_lua_newstate>>('lua_newstate');
  late final _dart_lua_newstate _lua_newstate =
      _lua_newstate_ptr.asFunction<_dart_lua_newstate>();

  void lua_close(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_close(
      L,
    );
  }

  late final _lua_close_ptr =
      _lookup<ffi.NativeFunction<_c_lua_close>>('lua_close');
  late final _dart_lua_close _lua_close =
      _lua_close_ptr.asFunction<_dart_lua_close>();

  ffi.Pointer<lua_State> lua_newthread(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_newthread(
      L,
    );
  }

  late final _lua_newthread_ptr =
      _lookup<ffi.NativeFunction<_c_lua_newthread>>('lua_newthread');
  late final _dart_lua_newthread _lua_newthread =
      _lua_newthread_ptr.asFunction<_dart_lua_newthread>();

  int lua_resetthread(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_resetthread(
      L,
    );
  }

  late final _lua_resetthread_ptr =
      _lookup<ffi.NativeFunction<_c_lua_resetthread>>('lua_resetthread');
  late final _dart_lua_resetthread _lua_resetthread =
      _lua_resetthread_ptr.asFunction<_dart_lua_resetthread>();

  ffi.Pointer<ffi.NativeFunction<lua_CFunction>> lua_atpanic(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.NativeFunction<lua_CFunction>> panicf,
  ) {
    return _lua_atpanic(
      L,
      panicf,
    );
  }

  late final _lua_atpanic_ptr =
      _lookup<ffi.NativeFunction<_c_lua_atpanic>>('lua_atpanic');
  late final _dart_lua_atpanic _lua_atpanic =
      _lua_atpanic_ptr.asFunction<_dart_lua_atpanic>();

  double lua_version(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_version(
      L,
    );
  }

  late final _lua_version_ptr =
      _lookup<ffi.NativeFunction<_c_lua_version>>('lua_version');
  late final _dart_lua_version _lua_version =
      _lua_version_ptr.asFunction<_dart_lua_version>();

  int lua_absindex(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_absindex(
      L,
      idx,
    );
  }

  late final _lua_absindex_ptr =
      _lookup<ffi.NativeFunction<_c_lua_absindex>>('lua_absindex');
  late final _dart_lua_absindex _lua_absindex =
      _lua_absindex_ptr.asFunction<_dart_lua_absindex>();

  int lua_gettop(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_gettop(
      L,
    );
  }

  late final _lua_gettop_ptr =
      _lookup<ffi.NativeFunction<_c_lua_gettop>>('lua_gettop');
  late final _dart_lua_gettop _lua_gettop =
      _lua_gettop_ptr.asFunction<_dart_lua_gettop>();

  void lua_settop(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_settop(
      L,
      idx,
    );
  }

  late final _lua_settop_ptr =
      _lookup<ffi.NativeFunction<_c_lua_settop>>('lua_settop');
  late final _dart_lua_settop _lua_settop =
      _lua_settop_ptr.asFunction<_dart_lua_settop>();

  void lua_pushvalue(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_pushvalue(
      L,
      idx,
    );
  }

  late final _lua_pushvalue_ptr =
      _lookup<ffi.NativeFunction<_c_lua_pushvalue>>('lua_pushvalue');
  late final _dart_lua_pushvalue _lua_pushvalue =
      _lua_pushvalue_ptr.asFunction<_dart_lua_pushvalue>();

  void lua_rotate(
    ffi.Pointer<lua_State> L,
    int idx,
    int n,
  ) {
    return _lua_rotate(
      L,
      idx,
      n,
    );
  }

  late final _lua_rotate_ptr =
      _lookup<ffi.NativeFunction<_c_lua_rotate>>('lua_rotate');
  late final _dart_lua_rotate _lua_rotate =
      _lua_rotate_ptr.asFunction<_dart_lua_rotate>();

  void lua_copy(
    ffi.Pointer<lua_State> L,
    int fromidx,
    int toidx,
  ) {
    return _lua_copy(
      L,
      fromidx,
      toidx,
    );
  }

  late final _lua_copy_ptr =
      _lookup<ffi.NativeFunction<_c_lua_copy>>('lua_copy');
  late final _dart_lua_copy _lua_copy =
      _lua_copy_ptr.asFunction<_dart_lua_copy>();

  int lua_checkstack(
    ffi.Pointer<lua_State> L,
    int n,
  ) {
    return _lua_checkstack(
      L,
      n,
    );
  }

  late final _lua_checkstack_ptr =
      _lookup<ffi.NativeFunction<_c_lua_checkstack>>('lua_checkstack');
  late final _dart_lua_checkstack _lua_checkstack =
      _lua_checkstack_ptr.asFunction<_dart_lua_checkstack>();

  void lua_xmove(
    ffi.Pointer<lua_State> from,
    ffi.Pointer<lua_State> to,
    int n,
  ) {
    return _lua_xmove(
      from,
      to,
      n,
    );
  }

  late final _lua_xmove_ptr =
      _lookup<ffi.NativeFunction<_c_lua_xmove>>('lua_xmove');
  late final _dart_lua_xmove _lua_xmove =
      _lua_xmove_ptr.asFunction<_dart_lua_xmove>();

  int lua_isnumber(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_isnumber(
      L,
      idx,
    );
  }

  late final _lua_isnumber_ptr =
      _lookup<ffi.NativeFunction<_c_lua_isnumber>>('lua_isnumber');
  late final _dart_lua_isnumber _lua_isnumber =
      _lua_isnumber_ptr.asFunction<_dart_lua_isnumber>();

  int lua_isstring(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_isstring(
      L,
      idx,
    );
  }

  late final _lua_isstring_ptr =
      _lookup<ffi.NativeFunction<_c_lua_isstring>>('lua_isstring');
  late final _dart_lua_isstring _lua_isstring =
      _lua_isstring_ptr.asFunction<_dart_lua_isstring>();

  int lua_iscfunction(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_iscfunction(
      L,
      idx,
    );
  }

  late final _lua_iscfunction_ptr =
      _lookup<ffi.NativeFunction<_c_lua_iscfunction>>('lua_iscfunction');
  late final _dart_lua_iscfunction _lua_iscfunction =
      _lua_iscfunction_ptr.asFunction<_dart_lua_iscfunction>();

  int lua_isinteger(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_isinteger(
      L,
      idx,
    );
  }

  late final _lua_isinteger_ptr =
      _lookup<ffi.NativeFunction<_c_lua_isinteger>>('lua_isinteger');
  late final _dart_lua_isinteger _lua_isinteger =
      _lua_isinteger_ptr.asFunction<_dart_lua_isinteger>();

  int lua_isuserdata(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_isuserdata(
      L,
      idx,
    );
  }

  late final _lua_isuserdata_ptr =
      _lookup<ffi.NativeFunction<_c_lua_isuserdata>>('lua_isuserdata');
  late final _dart_lua_isuserdata _lua_isuserdata =
      _lua_isuserdata_ptr.asFunction<_dart_lua_isuserdata>();

  int lua_type(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_type(
      L,
      idx,
    );
  }

  late final _lua_type_ptr =
      _lookup<ffi.NativeFunction<_c_lua_type>>('lua_type');
  late final _dart_lua_type _lua_type =
      _lua_type_ptr.asFunction<_dart_lua_type>();

  ffi.Pointer<ffi.Int8> lua_typename(
    ffi.Pointer<lua_State> L,
    int tp,
  ) {
    return _lua_typename(
      L,
      tp,
    );
  }

  late final _lua_typename_ptr =
      _lookup<ffi.NativeFunction<_c_lua_typename>>('lua_typename');
  late final _dart_lua_typename _lua_typename =
      _lua_typename_ptr.asFunction<_dart_lua_typename>();

  double lua_tonumberx(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Int32> isnum,
  ) {
    return _lua_tonumberx(
      L,
      idx,
      isnum,
    );
  }

  late final _lua_tonumberx_ptr =
      _lookup<ffi.NativeFunction<_c_lua_tonumberx>>('lua_tonumberx');
  late final _dart_lua_tonumberx _lua_tonumberx =
      _lua_tonumberx_ptr.asFunction<_dart_lua_tonumberx>();

  int lua_tointegerx(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Int32> isnum,
  ) {
    return _lua_tointegerx(
      L,
      idx,
      isnum,
    );
  }

  late final _lua_tointegerx_ptr =
      _lookup<ffi.NativeFunction<_c_lua_tointegerx>>('lua_tointegerx');
  late final _dart_lua_tointegerx _lua_tointegerx =
      _lua_tointegerx_ptr.asFunction<_dart_lua_tointegerx>();

  int lua_toboolean(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_toboolean(
      L,
      idx,
    );
  }

  late final _lua_toboolean_ptr =
      _lookup<ffi.NativeFunction<_c_lua_toboolean>>('lua_toboolean');
  late final _dart_lua_toboolean _lua_toboolean =
      _lua_toboolean_ptr.asFunction<_dart_lua_toboolean>();

  ffi.Pointer<ffi.Int8> lua_tolstring(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Uint64> len,
  ) {
    return _lua_tolstring(
      L,
      idx,
      len,
    );
  }

  late final _lua_tolstring_ptr =
      _lookup<ffi.NativeFunction<_c_lua_tolstring>>('lua_tolstring');
  late final _dart_lua_tolstring _lua_tolstring =
      _lua_tolstring_ptr.asFunction<_dart_lua_tolstring>();

  int lua_rawlen(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_rawlen(
      L,
      idx,
    );
  }

  late final _lua_rawlen_ptr =
      _lookup<ffi.NativeFunction<_c_lua_rawlen>>('lua_rawlen');
  late final _dart_lua_rawlen _lua_rawlen =
      _lua_rawlen_ptr.asFunction<_dart_lua_rawlen>();

  ffi.Pointer<ffi.NativeFunction<lua_CFunction>> lua_tocfunction(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_tocfunction(
      L,
      idx,
    );
  }

  late final _lua_tocfunction_ptr =
      _lookup<ffi.NativeFunction<_c_lua_tocfunction>>('lua_tocfunction');
  late final _dart_lua_tocfunction _lua_tocfunction =
      _lua_tocfunction_ptr.asFunction<_dart_lua_tocfunction>();

  ffi.Pointer<ffi.Void> lua_touserdata(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_touserdata(
      L,
      idx,
    );
  }

  late final _lua_touserdata_ptr =
      _lookup<ffi.NativeFunction<_c_lua_touserdata>>('lua_touserdata');
  late final _dart_lua_touserdata _lua_touserdata =
      _lua_touserdata_ptr.asFunction<_dart_lua_touserdata>();

  ffi.Pointer<lua_State> lua_tothread(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_tothread(
      L,
      idx,
    );
  }

  late final _lua_tothread_ptr =
      _lookup<ffi.NativeFunction<_c_lua_tothread>>('lua_tothread');
  late final _dart_lua_tothread _lua_tothread =
      _lua_tothread_ptr.asFunction<_dart_lua_tothread>();

  ffi.Pointer<ffi.Void> lua_topointer(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_topointer(
      L,
      idx,
    );
  }

  late final _lua_topointer_ptr =
      _lookup<ffi.NativeFunction<_c_lua_topointer>>('lua_topointer');
  late final _dart_lua_topointer _lua_topointer =
      _lua_topointer_ptr.asFunction<_dart_lua_topointer>();

  void lua_arith(
    ffi.Pointer<lua_State> L,
    int op,
  ) {
    return _lua_arith(
      L,
      op,
    );
  }

  late final _lua_arith_ptr =
      _lookup<ffi.NativeFunction<_c_lua_arith>>('lua_arith');
  late final _dart_lua_arith _lua_arith =
      _lua_arith_ptr.asFunction<_dart_lua_arith>();

  int lua_rawequal(
    ffi.Pointer<lua_State> L,
    int idx1,
    int idx2,
  ) {
    return _lua_rawequal(
      L,
      idx1,
      idx2,
    );
  }

  late final _lua_rawequal_ptr =
      _lookup<ffi.NativeFunction<_c_lua_rawequal>>('lua_rawequal');
  late final _dart_lua_rawequal _lua_rawequal =
      _lua_rawequal_ptr.asFunction<_dart_lua_rawequal>();

  int lua_compare(
    ffi.Pointer<lua_State> L,
    int idx1,
    int idx2,
    int op,
  ) {
    return _lua_compare(
      L,
      idx1,
      idx2,
      op,
    );
  }

  late final _lua_compare_ptr =
      _lookup<ffi.NativeFunction<_c_lua_compare>>('lua_compare');
  late final _dart_lua_compare _lua_compare =
      _lua_compare_ptr.asFunction<_dart_lua_compare>();

  void lua_pushnil(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_pushnil(
      L,
    );
  }

  late final _lua_pushnil_ptr =
      _lookup<ffi.NativeFunction<_c_lua_pushnil>>('lua_pushnil');
  late final _dart_lua_pushnil _lua_pushnil =
      _lua_pushnil_ptr.asFunction<_dart_lua_pushnil>();

  void lua_pushnumber(
    ffi.Pointer<lua_State> L,
    double n,
  ) {
    return _lua_pushnumber(
      L,
      n,
    );
  }

  late final _lua_pushnumber_ptr =
      _lookup<ffi.NativeFunction<_c_lua_pushnumber>>('lua_pushnumber');
  late final _dart_lua_pushnumber _lua_pushnumber =
      _lua_pushnumber_ptr.asFunction<_dart_lua_pushnumber>();

  void lua_pushinteger(
    ffi.Pointer<lua_State> L,
    int n,
  ) {
    return _lua_pushinteger(
      L,
      n,
    );
  }

  late final _lua_pushinteger_ptr =
      _lookup<ffi.NativeFunction<_c_lua_pushinteger>>('lua_pushinteger');
  late final _dart_lua_pushinteger _lua_pushinteger =
      _lua_pushinteger_ptr.asFunction<_dart_lua_pushinteger>();

  ffi.Pointer<ffi.Int8> lua_pushlstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> s,
    int len,
  ) {
    return _lua_pushlstring(
      L,
      s,
      len,
    );
  }

  late final _lua_pushlstring_ptr =
      _lookup<ffi.NativeFunction<_c_lua_pushlstring>>('lua_pushlstring');
  late final _dart_lua_pushlstring _lua_pushlstring =
      _lua_pushlstring_ptr.asFunction<_dart_lua_pushlstring>();

  ffi.Pointer<ffi.Int8> lua_pushstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _lua_pushstring(
      L,
      s,
    );
  }

  late final _lua_pushstring_ptr =
      _lookup<ffi.NativeFunction<_c_lua_pushstring>>('lua_pushstring');
  late final _dart_lua_pushstring _lua_pushstring =
      _lua_pushstring_ptr.asFunction<_dart_lua_pushstring>();

  ffi.Pointer<ffi.Int8> lua_pushvfstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> fmt,
    int argp,
  ) {
    return _lua_pushvfstring(
      L,
      fmt,
      argp,
    );
  }

  late final _lua_pushvfstring_ptr =
      _lookup<ffi.NativeFunction<_c_lua_pushvfstring>>('lua_pushvfstring');
  late final _dart_lua_pushvfstring _lua_pushvfstring =
      _lua_pushvfstring_ptr.asFunction<_dart_lua_pushvfstring>();

  ffi.Pointer<ffi.Int8> lua_pushfstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _lua_pushfstring(
      L,
      fmt,
    );
  }

  late final _lua_pushfstring_ptr =
      _lookup<ffi.NativeFunction<_c_lua_pushfstring>>('lua_pushfstring');
  late final _dart_lua_pushfstring _lua_pushfstring =
      _lua_pushfstring_ptr.asFunction<_dart_lua_pushfstring>();

  void lua_pushcclosure(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.NativeFunction<lua_CFunction>> fn,
    int n,
  ) {
    return _lua_pushcclosure(
      L,
      fn,
      n,
    );
  }

  late final _lua_pushcclosure_ptr =
      _lookup<ffi.NativeFunction<_c_lua_pushcclosure>>('lua_pushcclosure');
  late final _dart_lua_pushcclosure _lua_pushcclosure =
      _lua_pushcclosure_ptr.asFunction<_dart_lua_pushcclosure>();

  void lua_pushboolean(
    ffi.Pointer<lua_State> L,
    int b,
  ) {
    return _lua_pushboolean(
      L,
      b,
    );
  }

  late final _lua_pushboolean_ptr =
      _lookup<ffi.NativeFunction<_c_lua_pushboolean>>('lua_pushboolean');
  late final _dart_lua_pushboolean _lua_pushboolean =
      _lua_pushboolean_ptr.asFunction<_dart_lua_pushboolean>();

  void lua_pushlightuserdata(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Void> p,
  ) {
    return _lua_pushlightuserdata(
      L,
      p,
    );
  }

  late final _lua_pushlightuserdata_ptr =
      _lookup<ffi.NativeFunction<_c_lua_pushlightuserdata>>(
          'lua_pushlightuserdata');
  late final _dart_lua_pushlightuserdata _lua_pushlightuserdata =
      _lua_pushlightuserdata_ptr.asFunction<_dart_lua_pushlightuserdata>();

  int lua_pushthread(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_pushthread(
      L,
    );
  }

  late final _lua_pushthread_ptr =
      _lookup<ffi.NativeFunction<_c_lua_pushthread>>('lua_pushthread');
  late final _dart_lua_pushthread _lua_pushthread =
      _lua_pushthread_ptr.asFunction<_dart_lua_pushthread>();

  int lua_getglobal(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _lua_getglobal(
      L,
      name,
    );
  }

  late final _lua_getglobal_ptr =
      _lookup<ffi.NativeFunction<_c_lua_getglobal>>('lua_getglobal');
  late final _dart_lua_getglobal _lua_getglobal =
      _lua_getglobal_ptr.asFunction<_dart_lua_getglobal>();

  int lua_gettable(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_gettable(
      L,
      idx,
    );
  }

  late final _lua_gettable_ptr =
      _lookup<ffi.NativeFunction<_c_lua_gettable>>('lua_gettable');
  late final _dart_lua_gettable _lua_gettable =
      _lua_gettable_ptr.asFunction<_dart_lua_gettable>();

  int lua_getfield(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Int8> k,
  ) {
    return _lua_getfield(
      L,
      idx,
      k,
    );
  }

  late final _lua_getfield_ptr =
      _lookup<ffi.NativeFunction<_c_lua_getfield>>('lua_getfield');
  late final _dart_lua_getfield _lua_getfield =
      _lua_getfield_ptr.asFunction<_dart_lua_getfield>();

  int lua_geti(
    ffi.Pointer<lua_State> L,
    int idx,
    int n,
  ) {
    return _lua_geti(
      L,
      idx,
      n,
    );
  }

  late final _lua_geti_ptr =
      _lookup<ffi.NativeFunction<_c_lua_geti>>('lua_geti');
  late final _dart_lua_geti _lua_geti =
      _lua_geti_ptr.asFunction<_dart_lua_geti>();

  int lua_rawget(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_rawget(
      L,
      idx,
    );
  }

  late final _lua_rawget_ptr =
      _lookup<ffi.NativeFunction<_c_lua_rawget>>('lua_rawget');
  late final _dart_lua_rawget _lua_rawget =
      _lua_rawget_ptr.asFunction<_dart_lua_rawget>();

  int lua_rawgeti(
    ffi.Pointer<lua_State> L,
    int idx,
    int n,
  ) {
    return _lua_rawgeti(
      L,
      idx,
      n,
    );
  }

  late final _lua_rawgeti_ptr =
      _lookup<ffi.NativeFunction<_c_lua_rawgeti>>('lua_rawgeti');
  late final _dart_lua_rawgeti _lua_rawgeti =
      _lua_rawgeti_ptr.asFunction<_dart_lua_rawgeti>();

  int lua_rawgetp(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Void> p,
  ) {
    return _lua_rawgetp(
      L,
      idx,
      p,
    );
  }

  late final _lua_rawgetp_ptr =
      _lookup<ffi.NativeFunction<_c_lua_rawgetp>>('lua_rawgetp');
  late final _dart_lua_rawgetp _lua_rawgetp =
      _lua_rawgetp_ptr.asFunction<_dart_lua_rawgetp>();

  void lua_createtable(
    ffi.Pointer<lua_State> L,
    int narr,
    int nrec,
  ) {
    return _lua_createtable(
      L,
      narr,
      nrec,
    );
  }

  late final _lua_createtable_ptr =
      _lookup<ffi.NativeFunction<_c_lua_createtable>>('lua_createtable');
  late final _dart_lua_createtable _lua_createtable =
      _lua_createtable_ptr.asFunction<_dart_lua_createtable>();

  ffi.Pointer<ffi.Void> lua_newuserdatauv(
    ffi.Pointer<lua_State> L,
    int sz,
    int nuvalue,
  ) {
    return _lua_newuserdatauv(
      L,
      sz,
      nuvalue,
    );
  }

  late final _lua_newuserdatauv_ptr =
      _lookup<ffi.NativeFunction<_c_lua_newuserdatauv>>('lua_newuserdatauv');
  late final _dart_lua_newuserdatauv _lua_newuserdatauv =
      _lua_newuserdatauv_ptr.asFunction<_dart_lua_newuserdatauv>();

  int lua_getmetatable(
    ffi.Pointer<lua_State> L,
    int objindex,
  ) {
    return _lua_getmetatable(
      L,
      objindex,
    );
  }

  late final _lua_getmetatable_ptr =
      _lookup<ffi.NativeFunction<_c_lua_getmetatable>>('lua_getmetatable');
  late final _dart_lua_getmetatable _lua_getmetatable =
      _lua_getmetatable_ptr.asFunction<_dart_lua_getmetatable>();

  int lua_getiuservalue(
    ffi.Pointer<lua_State> L,
    int idx,
    int n,
  ) {
    return _lua_getiuservalue(
      L,
      idx,
      n,
    );
  }

  late final _lua_getiuservalue_ptr =
      _lookup<ffi.NativeFunction<_c_lua_getiuservalue>>('lua_getiuservalue');
  late final _dart_lua_getiuservalue _lua_getiuservalue =
      _lua_getiuservalue_ptr.asFunction<_dart_lua_getiuservalue>();

  void lua_setglobal(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _lua_setglobal(
      L,
      name,
    );
  }

  late final _lua_setglobal_ptr =
      _lookup<ffi.NativeFunction<_c_lua_setglobal>>('lua_setglobal');
  late final _dart_lua_setglobal _lua_setglobal =
      _lua_setglobal_ptr.asFunction<_dart_lua_setglobal>();

  void lua_settable(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_settable(
      L,
      idx,
    );
  }

  late final _lua_settable_ptr =
      _lookup<ffi.NativeFunction<_c_lua_settable>>('lua_settable');
  late final _dart_lua_settable _lua_settable =
      _lua_settable_ptr.asFunction<_dart_lua_settable>();

  void lua_setfield(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Int8> k,
  ) {
    return _lua_setfield(
      L,
      idx,
      k,
    );
  }

  late final _lua_setfield_ptr =
      _lookup<ffi.NativeFunction<_c_lua_setfield>>('lua_setfield');
  late final _dart_lua_setfield _lua_setfield =
      _lua_setfield_ptr.asFunction<_dart_lua_setfield>();

  void lua_seti(
    ffi.Pointer<lua_State> L,
    int idx,
    int n,
  ) {
    return _lua_seti(
      L,
      idx,
      n,
    );
  }

  late final _lua_seti_ptr =
      _lookup<ffi.NativeFunction<_c_lua_seti>>('lua_seti');
  late final _dart_lua_seti _lua_seti =
      _lua_seti_ptr.asFunction<_dart_lua_seti>();

  void lua_rawset(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_rawset(
      L,
      idx,
    );
  }

  late final _lua_rawset_ptr =
      _lookup<ffi.NativeFunction<_c_lua_rawset>>('lua_rawset');
  late final _dart_lua_rawset _lua_rawset =
      _lua_rawset_ptr.asFunction<_dart_lua_rawset>();

  void lua_rawseti(
    ffi.Pointer<lua_State> L,
    int idx,
    int n,
  ) {
    return _lua_rawseti(
      L,
      idx,
      n,
    );
  }

  late final _lua_rawseti_ptr =
      _lookup<ffi.NativeFunction<_c_lua_rawseti>>('lua_rawseti');
  late final _dart_lua_rawseti _lua_rawseti =
      _lua_rawseti_ptr.asFunction<_dart_lua_rawseti>();

  void lua_rawsetp(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Void> p,
  ) {
    return _lua_rawsetp(
      L,
      idx,
      p,
    );
  }

  late final _lua_rawsetp_ptr =
      _lookup<ffi.NativeFunction<_c_lua_rawsetp>>('lua_rawsetp');
  late final _dart_lua_rawsetp _lua_rawsetp =
      _lua_rawsetp_ptr.asFunction<_dart_lua_rawsetp>();

  int lua_setmetatable(
    ffi.Pointer<lua_State> L,
    int objindex,
  ) {
    return _lua_setmetatable(
      L,
      objindex,
    );
  }

  late final _lua_setmetatable_ptr =
      _lookup<ffi.NativeFunction<_c_lua_setmetatable>>('lua_setmetatable');
  late final _dart_lua_setmetatable _lua_setmetatable =
      _lua_setmetatable_ptr.asFunction<_dart_lua_setmetatable>();

  int lua_setiuservalue(
    ffi.Pointer<lua_State> L,
    int idx,
    int n,
  ) {
    return _lua_setiuservalue(
      L,
      idx,
      n,
    );
  }

  late final _lua_setiuservalue_ptr =
      _lookup<ffi.NativeFunction<_c_lua_setiuservalue>>('lua_setiuservalue');
  late final _dart_lua_setiuservalue _lua_setiuservalue =
      _lua_setiuservalue_ptr.asFunction<_dart_lua_setiuservalue>();

  void lua_callk(
    ffi.Pointer<lua_State> L,
    int nargs,
    int nresults,
    int ctx,
    ffi.Pointer<ffi.NativeFunction<lua_KFunction>> k,
  ) {
    return _lua_callk(
      L,
      nargs,
      nresults,
      ctx,
      k,
    );
  }

  late final _lua_callk_ptr =
      _lookup<ffi.NativeFunction<_c_lua_callk>>('lua_callk');
  late final _dart_lua_callk _lua_callk =
      _lua_callk_ptr.asFunction<_dart_lua_callk>();

  int lua_pcallk(
    ffi.Pointer<lua_State> L,
    int nargs,
    int nresults,
    int errfunc,
    int ctx,
    ffi.Pointer<ffi.NativeFunction<lua_KFunction>> k,
  ) {
    return _lua_pcallk(
      L,
      nargs,
      nresults,
      errfunc,
      ctx,
      k,
    );
  }

  late final _lua_pcallk_ptr =
      _lookup<ffi.NativeFunction<_c_lua_pcallk>>('lua_pcallk');
  late final _dart_lua_pcallk _lua_pcallk =
      _lua_pcallk_ptr.asFunction<_dart_lua_pcallk>();

  int lua_load(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.NativeFunction<lua_Reader>> reader,
    ffi.Pointer<ffi.Void> dt,
    ffi.Pointer<ffi.Int8> chunkname,
    ffi.Pointer<ffi.Int8> mode,
  ) {
    return _lua_load(
      L,
      reader,
      dt,
      chunkname,
      mode,
    );
  }

  late final _lua_load_ptr =
      _lookup<ffi.NativeFunction<_c_lua_load>>('lua_load');
  late final _dart_lua_load _lua_load =
      _lua_load_ptr.asFunction<_dart_lua_load>();

  int lua_dump(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.NativeFunction<lua_Writer>> writer,
    ffi.Pointer<ffi.Void> data,
    int strip,
  ) {
    return _lua_dump(
      L,
      writer,
      data,
      strip,
    );
  }

  late final _lua_dump_ptr =
      _lookup<ffi.NativeFunction<_c_lua_dump>>('lua_dump');
  late final _dart_lua_dump _lua_dump =
      _lua_dump_ptr.asFunction<_dart_lua_dump>();

  int lua_yieldk(
    ffi.Pointer<lua_State> L,
    int nresults,
    int ctx,
    ffi.Pointer<ffi.NativeFunction<lua_KFunction>> k,
  ) {
    return _lua_yieldk(
      L,
      nresults,
      ctx,
      k,
    );
  }

  late final _lua_yieldk_ptr =
      _lookup<ffi.NativeFunction<_c_lua_yieldk>>('lua_yieldk');
  late final _dart_lua_yieldk _lua_yieldk =
      _lua_yieldk_ptr.asFunction<_dart_lua_yieldk>();

  int lua_resume(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<lua_State> from,
    int narg,
    ffi.Pointer<ffi.Int32> nres,
  ) {
    return _lua_resume(
      L,
      from,
      narg,
      nres,
    );
  }

  late final _lua_resume_ptr =
      _lookup<ffi.NativeFunction<_c_lua_resume>>('lua_resume');
  late final _dart_lua_resume _lua_resume =
      _lua_resume_ptr.asFunction<_dart_lua_resume>();

  int lua_status(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_status(
      L,
    );
  }

  late final _lua_status_ptr =
      _lookup<ffi.NativeFunction<_c_lua_status>>('lua_status');
  late final _dart_lua_status _lua_status =
      _lua_status_ptr.asFunction<_dart_lua_status>();

  int lua_isyieldable(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_isyieldable(
      L,
    );
  }

  late final _lua_isyieldable_ptr =
      _lookup<ffi.NativeFunction<_c_lua_isyieldable>>('lua_isyieldable');
  late final _dart_lua_isyieldable _lua_isyieldable =
      _lua_isyieldable_ptr.asFunction<_dart_lua_isyieldable>();

  void lua_setwarnf(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.NativeFunction<lua_WarnFunction>> f,
    ffi.Pointer<ffi.Void> ud,
  ) {
    return _lua_setwarnf(
      L,
      f,
      ud,
    );
  }

  late final _lua_setwarnf_ptr =
      _lookup<ffi.NativeFunction<_c_lua_setwarnf>>('lua_setwarnf');
  late final _dart_lua_setwarnf _lua_setwarnf =
      _lua_setwarnf_ptr.asFunction<_dart_lua_setwarnf>();

  void lua_warning(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> msg,
    int tocont,
  ) {
    return _lua_warning(
      L,
      msg,
      tocont,
    );
  }

  late final _lua_warning_ptr =
      _lookup<ffi.NativeFunction<_c_lua_warning>>('lua_warning');
  late final _dart_lua_warning _lua_warning =
      _lua_warning_ptr.asFunction<_dart_lua_warning>();

  int lua_gc(
    ffi.Pointer<lua_State> L,
    int what,
  ) {
    return _lua_gc(
      L,
      what,
    );
  }

  late final _lua_gc_ptr = _lookup<ffi.NativeFunction<_c_lua_gc>>('lua_gc');
  late final _dart_lua_gc _lua_gc = _lua_gc_ptr.asFunction<_dart_lua_gc>();

  int lua_error(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_error(
      L,
    );
  }

  late final _lua_error_ptr =
      _lookup<ffi.NativeFunction<_c_lua_error>>('lua_error');
  late final _dart_lua_error _lua_error =
      _lua_error_ptr.asFunction<_dart_lua_error>();

  int lua_next(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_next(
      L,
      idx,
    );
  }

  late final _lua_next_ptr =
      _lookup<ffi.NativeFunction<_c_lua_next>>('lua_next');
  late final _dart_lua_next _lua_next =
      _lua_next_ptr.asFunction<_dart_lua_next>();

  void lua_concat(
    ffi.Pointer<lua_State> L,
    int n,
  ) {
    return _lua_concat(
      L,
      n,
    );
  }

  late final _lua_concat_ptr =
      _lookup<ffi.NativeFunction<_c_lua_concat>>('lua_concat');
  late final _dart_lua_concat _lua_concat =
      _lua_concat_ptr.asFunction<_dart_lua_concat>();

  void lua_len(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_len(
      L,
      idx,
    );
  }

  late final _lua_len_ptr = _lookup<ffi.NativeFunction<_c_lua_len>>('lua_len');
  late final _dart_lua_len _lua_len = _lua_len_ptr.asFunction<_dart_lua_len>();

  int lua_stringtonumber(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _lua_stringtonumber(
      L,
      s,
    );
  }

  late final _lua_stringtonumber_ptr =
      _lookup<ffi.NativeFunction<_c_lua_stringtonumber>>('lua_stringtonumber');
  late final _dart_lua_stringtonumber _lua_stringtonumber =
      _lua_stringtonumber_ptr.asFunction<_dart_lua_stringtonumber>();

  ffi.Pointer<ffi.NativeFunction<lua_Alloc>> lua_getallocf(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ud,
  ) {
    return _lua_getallocf(
      L,
      ud,
    );
  }

  late final _lua_getallocf_ptr =
      _lookup<ffi.NativeFunction<_c_lua_getallocf>>('lua_getallocf');
  late final _dart_lua_getallocf _lua_getallocf =
      _lua_getallocf_ptr.asFunction<_dart_lua_getallocf>();

  void lua_setallocf(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.NativeFunction<lua_Alloc>> f,
    ffi.Pointer<ffi.Void> ud,
  ) {
    return _lua_setallocf(
      L,
      f,
      ud,
    );
  }

  late final _lua_setallocf_ptr =
      _lookup<ffi.NativeFunction<_c_lua_setallocf>>('lua_setallocf');
  late final _dart_lua_setallocf _lua_setallocf =
      _lua_setallocf_ptr.asFunction<_dart_lua_setallocf>();

  void lua_toclose(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_toclose(
      L,
      idx,
    );
  }

  late final _lua_toclose_ptr =
      _lookup<ffi.NativeFunction<_c_lua_toclose>>('lua_toclose');
  late final _dart_lua_toclose _lua_toclose =
      _lua_toclose_ptr.asFunction<_dart_lua_toclose>();

  int lua_getstack(
    ffi.Pointer<lua_State> L,
    int level,
    ffi.Pointer<lua_Debug> ar,
  ) {
    return _lua_getstack(
      L,
      level,
      ar,
    );
  }

  late final _lua_getstack_ptr =
      _lookup<ffi.NativeFunction<_c_lua_getstack>>('lua_getstack');
  late final _dart_lua_getstack _lua_getstack =
      _lua_getstack_ptr.asFunction<_dart_lua_getstack>();

  int lua_getinfo(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> what,
    ffi.Pointer<lua_Debug> ar,
  ) {
    return _lua_getinfo(
      L,
      what,
      ar,
    );
  }

  late final _lua_getinfo_ptr =
      _lookup<ffi.NativeFunction<_c_lua_getinfo>>('lua_getinfo');
  late final _dart_lua_getinfo _lua_getinfo =
      _lua_getinfo_ptr.asFunction<_dart_lua_getinfo>();

  ffi.Pointer<ffi.Int8> lua_getlocal(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<lua_Debug> ar,
    int n,
  ) {
    return _lua_getlocal(
      L,
      ar,
      n,
    );
  }

  late final _lua_getlocal_ptr =
      _lookup<ffi.NativeFunction<_c_lua_getlocal>>('lua_getlocal');
  late final _dart_lua_getlocal _lua_getlocal =
      _lua_getlocal_ptr.asFunction<_dart_lua_getlocal>();

  ffi.Pointer<ffi.Int8> lua_setlocal(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<lua_Debug> ar,
    int n,
  ) {
    return _lua_setlocal(
      L,
      ar,
      n,
    );
  }

  late final _lua_setlocal_ptr =
      _lookup<ffi.NativeFunction<_c_lua_setlocal>>('lua_setlocal');
  late final _dart_lua_setlocal _lua_setlocal =
      _lua_setlocal_ptr.asFunction<_dart_lua_setlocal>();

  ffi.Pointer<ffi.Int8> lua_getupvalue(
    ffi.Pointer<lua_State> L,
    int funcindex,
    int n,
  ) {
    return _lua_getupvalue(
      L,
      funcindex,
      n,
    );
  }

  late final _lua_getupvalue_ptr =
      _lookup<ffi.NativeFunction<_c_lua_getupvalue>>('lua_getupvalue');
  late final _dart_lua_getupvalue _lua_getupvalue =
      _lua_getupvalue_ptr.asFunction<_dart_lua_getupvalue>();

  ffi.Pointer<ffi.Int8> lua_setupvalue(
    ffi.Pointer<lua_State> L,
    int funcindex,
    int n,
  ) {
    return _lua_setupvalue(
      L,
      funcindex,
      n,
    );
  }

  late final _lua_setupvalue_ptr =
      _lookup<ffi.NativeFunction<_c_lua_setupvalue>>('lua_setupvalue');
  late final _dart_lua_setupvalue _lua_setupvalue =
      _lua_setupvalue_ptr.asFunction<_dart_lua_setupvalue>();

  ffi.Pointer<ffi.Void> lua_upvalueid(
    ffi.Pointer<lua_State> L,
    int fidx,
    int n,
  ) {
    return _lua_upvalueid(
      L,
      fidx,
      n,
    );
  }

  late final _lua_upvalueid_ptr =
      _lookup<ffi.NativeFunction<_c_lua_upvalueid>>('lua_upvalueid');
  late final _dart_lua_upvalueid _lua_upvalueid =
      _lua_upvalueid_ptr.asFunction<_dart_lua_upvalueid>();

  void lua_upvaluejoin(
    ffi.Pointer<lua_State> L,
    int fidx1,
    int n1,
    int fidx2,
    int n2,
  ) {
    return _lua_upvaluejoin(
      L,
      fidx1,
      n1,
      fidx2,
      n2,
    );
  }

  late final _lua_upvaluejoin_ptr =
      _lookup<ffi.NativeFunction<_c_lua_upvaluejoin>>('lua_upvaluejoin');
  late final _dart_lua_upvaluejoin _lua_upvaluejoin =
      _lua_upvaluejoin_ptr.asFunction<_dart_lua_upvaluejoin>();

  void lua_sethook(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.NativeFunction<lua_Hook>> func,
    int mask,
    int count,
  ) {
    return _lua_sethook(
      L,
      func,
      mask,
      count,
    );
  }

  late final _lua_sethook_ptr =
      _lookup<ffi.NativeFunction<_c_lua_sethook>>('lua_sethook');
  late final _dart_lua_sethook _lua_sethook =
      _lua_sethook_ptr.asFunction<_dart_lua_sethook>();

  ffi.Pointer<ffi.NativeFunction<lua_Hook>> lua_gethook(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_gethook(
      L,
    );
  }

  late final _lua_gethook_ptr =
      _lookup<ffi.NativeFunction<_c_lua_gethook>>('lua_gethook');
  late final _dart_lua_gethook _lua_gethook =
      _lua_gethook_ptr.asFunction<_dart_lua_gethook>();

  int lua_gethookmask(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_gethookmask(
      L,
    );
  }

  late final _lua_gethookmask_ptr =
      _lookup<ffi.NativeFunction<_c_lua_gethookmask>>('lua_gethookmask');
  late final _dart_lua_gethookmask _lua_gethookmask =
      _lua_gethookmask_ptr.asFunction<_dart_lua_gethookmask>();

  int lua_gethookcount(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_gethookcount(
      L,
    );
  }

  late final _lua_gethookcount_ptr =
      _lookup<ffi.NativeFunction<_c_lua_gethookcount>>('lua_gethookcount');
  late final _dart_lua_gethookcount _lua_gethookcount =
      _lua_gethookcount_ptr.asFunction<_dart_lua_gethookcount>();

  int lua_setcstacklimit(
    ffi.Pointer<lua_State> L,
    int limit,
  ) {
    return _lua_setcstacklimit(
      L,
      limit,
    );
  }

  late final _lua_setcstacklimit_ptr =
      _lookup<ffi.NativeFunction<_c_lua_setcstacklimit>>('lua_setcstacklimit');
  late final _dart_lua_setcstacklimit _lua_setcstacklimit =
      _lua_setcstacklimit_ptr.asFunction<_dart_lua_setcstacklimit>();

  int luaopen_base(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaopen_base(
      L,
    );
  }

  late final _luaopen_base_ptr =
      _lookup<ffi.NativeFunction<_c_luaopen_base>>('luaopen_base');
  late final _dart_luaopen_base _luaopen_base =
      _luaopen_base_ptr.asFunction<_dart_luaopen_base>();

  int luaopen_coroutine(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaopen_coroutine(
      L,
    );
  }

  late final _luaopen_coroutine_ptr =
      _lookup<ffi.NativeFunction<_c_luaopen_coroutine>>('luaopen_coroutine');
  late final _dart_luaopen_coroutine _luaopen_coroutine =
      _luaopen_coroutine_ptr.asFunction<_dart_luaopen_coroutine>();

  int luaopen_table(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaopen_table(
      L,
    );
  }

  late final _luaopen_table_ptr =
      _lookup<ffi.NativeFunction<_c_luaopen_table>>('luaopen_table');
  late final _dart_luaopen_table _luaopen_table =
      _luaopen_table_ptr.asFunction<_dart_luaopen_table>();

  int luaopen_io(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaopen_io(
      L,
    );
  }

  late final _luaopen_io_ptr =
      _lookup<ffi.NativeFunction<_c_luaopen_io>>('luaopen_io');
  late final _dart_luaopen_io _luaopen_io =
      _luaopen_io_ptr.asFunction<_dart_luaopen_io>();

  int luaopen_os(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaopen_os(
      L,
    );
  }

  late final _luaopen_os_ptr =
      _lookup<ffi.NativeFunction<_c_luaopen_os>>('luaopen_os');
  late final _dart_luaopen_os _luaopen_os =
      _luaopen_os_ptr.asFunction<_dart_luaopen_os>();

  int luaopen_string(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaopen_string(
      L,
    );
  }

  late final _luaopen_string_ptr =
      _lookup<ffi.NativeFunction<_c_luaopen_string>>('luaopen_string');
  late final _dart_luaopen_string _luaopen_string =
      _luaopen_string_ptr.asFunction<_dart_luaopen_string>();

  int luaopen_utf8(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaopen_utf8(
      L,
    );
  }

  late final _luaopen_utf8_ptr =
      _lookup<ffi.NativeFunction<_c_luaopen_utf8>>('luaopen_utf8');
  late final _dart_luaopen_utf8 _luaopen_utf8 =
      _luaopen_utf8_ptr.asFunction<_dart_luaopen_utf8>();

  int luaopen_math(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaopen_math(
      L,
    );
  }

  late final _luaopen_math_ptr =
      _lookup<ffi.NativeFunction<_c_luaopen_math>>('luaopen_math');
  late final _dart_luaopen_math _luaopen_math =
      _luaopen_math_ptr.asFunction<_dart_luaopen_math>();

  int luaopen_debug(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaopen_debug(
      L,
    );
  }

  late final _luaopen_debug_ptr =
      _lookup<ffi.NativeFunction<_c_luaopen_debug>>('luaopen_debug');
  late final _dart_luaopen_debug _luaopen_debug =
      _luaopen_debug_ptr.asFunction<_dart_luaopen_debug>();

  int luaopen_package(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaopen_package(
      L,
    );
  }

  late final _luaopen_package_ptr =
      _lookup<ffi.NativeFunction<_c_luaopen_package>>('luaopen_package');
  late final _dart_luaopen_package _luaopen_package =
      _luaopen_package_ptr.asFunction<_dart_luaopen_package>();

  void luaL_openlibs(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaL_openlibs(
      L,
    );
  }

  late final _luaL_openlibs_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_openlibs>>('luaL_openlibs');
  late final _dart_luaL_openlibs _luaL_openlibs =
      _luaL_openlibs_ptr.asFunction<_dart_luaL_openlibs>();

  late final ffi.Pointer<ffi.Pointer<_IO_FILE>> _stdin =
      _lookup<ffi.Pointer<_IO_FILE>>('stdin');

  ffi.Pointer<_IO_FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<_IO_FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<_IO_FILE>> _stdout =
      _lookup<ffi.Pointer<_IO_FILE>>('stdout');

  ffi.Pointer<_IO_FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<_IO_FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<_IO_FILE>> _stderr =
      _lookup<ffi.Pointer<_IO_FILE>>('stderr');

  ffi.Pointer<_IO_FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<_IO_FILE> value) => _stderr.value = value;

  int remove(
    ffi.Pointer<ffi.Int8> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _remove_ptr = _lookup<ffi.NativeFunction<_c_remove>>('remove');
  late final _dart_remove _remove = _remove_ptr.asFunction<_dart_remove>();

  int rename(
    ffi.Pointer<ffi.Int8> __old,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _rename_ptr = _lookup<ffi.NativeFunction<_c_rename>>('rename');
  late final _dart_rename _rename = _rename_ptr.asFunction<_dart_rename>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Int8> __old,
    int __newfd,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameat_ptr =
      _lookup<ffi.NativeFunction<_c_renameat>>('renameat');
  late final _dart_renameat _renameat =
      _renameat_ptr.asFunction<_dart_renameat>();

  ffi.Pointer<_IO_FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfile_ptr = _lookup<ffi.NativeFunction<_c_tmpfile>>('tmpfile');
  late final _dart_tmpfile _tmpfile = _tmpfile_ptr.asFunction<_dart_tmpfile>();

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _tmpnam(
      __s,
    );
  }

  late final _tmpnam_ptr = _lookup<ffi.NativeFunction<_c_tmpnam>>('tmpnam');
  late final _dart_tmpnam _tmpnam = _tmpnam_ptr.asFunction<_dart_tmpnam>();

  ffi.Pointer<ffi.Int8> tmpnam_r(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_r_ptr =
      _lookup<ffi.NativeFunction<_c_tmpnam_r>>('tmpnam_r');
  late final _dart_tmpnam_r _tmpnam_r =
      _tmpnam_r_ptr.asFunction<_dart_tmpnam_r>();

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> __dir,
    ffi.Pointer<ffi.Int8> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnam_ptr = _lookup<ffi.NativeFunction<_c_tempnam>>('tempnam');
  late final _dart_tempnam _tempnam = _tempnam_ptr.asFunction<_dart_tempnam>();

  int fclose(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclose_ptr = _lookup<ffi.NativeFunction<_c_fclose>>('fclose');
  late final _dart_fclose _fclose = _fclose_ptr.asFunction<_dart_fclose>();

  int fflush(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflush_ptr = _lookup<ffi.NativeFunction<_c_fflush>>('fflush');
  late final _dart_fflush _fflush = _fflush_ptr.asFunction<_dart_fflush>();

  int fflush_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fflush_unlocked>>('fflush_unlocked');
  late final _dart_fflush_unlocked _fflush_unlocked =
      _fflush_unlocked_ptr.asFunction<_dart_fflush_unlocked>();

  ffi.Pointer<_IO_FILE> fopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopen_ptr = _lookup<ffi.NativeFunction<_c_fopen>>('fopen');
  late final _dart_fopen _fopen = _fopen_ptr.asFunction<_dart_fopen>();

  ffi.Pointer<_IO_FILE> freopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopen_ptr = _lookup<ffi.NativeFunction<_c_freopen>>('freopen');
  late final _dart_freopen _freopen = _freopen_ptr.asFunction<_dart_freopen>();

  ffi.Pointer<_IO_FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopen_ptr = _lookup<ffi.NativeFunction<_c_fdopen>>('fdopen');
  late final _dart_fdopen _fdopen = _fdopen_ptr.asFunction<_dart_fdopen>();

  ffi.Pointer<_IO_FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopen_ptr =
      _lookup<ffi.NativeFunction<_c_fmemopen>>('fmemopen');
  late final _dart_fmemopen _fmemopen =
      _fmemopen_ptr.asFunction<_dart_fmemopen>();

  ffi.Pointer<_IO_FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
    ffi.Pointer<ffi.Uint64> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstream_ptr =
      _lookup<ffi.NativeFunction<_c_open_memstream>>('open_memstream');
  late final _dart_open_memstream _open_memstream =
      _open_memstream_ptr.asFunction<_dart_open_memstream>();

  void setbuf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbuf_ptr = _lookup<ffi.NativeFunction<_c_setbuf>>('setbuf');
  late final _dart_setbuf _setbuf = _setbuf_ptr.asFunction<_dart_setbuf>();

  int setvbuf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbuf_ptr = _lookup<ffi.NativeFunction<_c_setvbuf>>('setvbuf');
  late final _dart_setvbuf _setvbuf = _setvbuf_ptr.asFunction<_dart_setvbuf>();

  void setbuffer(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbuffer_ptr =
      _lookup<ffi.NativeFunction<_c_setbuffer>>('setbuffer');
  late final _dart_setbuffer _setbuffer =
      _setbuffer_ptr.asFunction<_dart_setbuffer>();

  void setlinebuf(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebuf_ptr =
      _lookup<ffi.NativeFunction<_c_setlinebuf>>('setlinebuf');
  late final _dart_setlinebuf _setlinebuf =
      _setlinebuf_ptr.asFunction<_dart_setlinebuf>();

  int fprintf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintf_ptr = _lookup<ffi.NativeFunction<_c_fprintf>>('fprintf');
  late final _dart_fprintf _fprintf = _fprintf_ptr.asFunction<_dart_fprintf>();

  int printf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printf_ptr = _lookup<ffi.NativeFunction<_c_printf>>('printf');
  late final _dart_printf _printf = _printf_ptr.asFunction<_dart_printf>();

  int sprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintf_ptr = _lookup<ffi.NativeFunction<_c_sprintf>>('sprintf');
  late final _dart_sprintf _sprintf = _sprintf_ptr.asFunction<_dart_sprintf>();

  int vfprintf(
    ffi.Pointer<_IO_FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vfprintf>>('vfprintf');
  late final _dart_vfprintf _vfprintf =
      _vfprintf_ptr.asFunction<_dart_vfprintf>();

  int vprintf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintf_ptr = _lookup<ffi.NativeFunction<_c_vprintf>>('vprintf');
  late final _dart_vprintf _vprintf = _vprintf_ptr.asFunction<_dart_vprintf>();

  int vsprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vsprintf>>('vsprintf');
  late final _dart_vsprintf _vsprintf =
      _vsprintf_ptr.asFunction<_dart_vsprintf>();

  int snprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintf_ptr =
      _lookup<ffi.NativeFunction<_c_snprintf>>('snprintf');
  late final _dart_snprintf _snprintf =
      _snprintf_ptr.asFunction<_dart_snprintf>();

  int vsnprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vsnprintf>>('vsnprintf');
  late final _dart_vsnprintf _vsnprintf =
      _vsnprintf_ptr.asFunction<_dart_vsnprintf>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vdprintf>>('vdprintf');
  late final _dart_vdprintf _vdprintf =
      _vdprintf_ptr.asFunction<_dart_vdprintf>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintf_ptr = _lookup<ffi.NativeFunction<_c_dprintf>>('dprintf');
  late final _dart_dprintf _dprintf = _dprintf_ptr.asFunction<_dart_dprintf>();

  int fscanf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanf_ptr = _lookup<ffi.NativeFunction<_c_fscanf>>('fscanf');
  late final _dart_fscanf _fscanf = _fscanf_ptr.asFunction<_dart_fscanf>();

  int scanf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanf_ptr = _lookup<ffi.NativeFunction<_c_scanf>>('scanf');
  late final _dart_scanf _scanf = _scanf_ptr.asFunction<_dart_scanf>();

  int sscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanf_ptr = _lookup<ffi.NativeFunction<_c_sscanf>>('sscanf');
  late final _dart_sscanf _sscanf = _sscanf_ptr.asFunction<_dart_sscanf>();

  int vfscanf(
    ffi.Pointer<_IO_FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanf_ptr = _lookup<ffi.NativeFunction<_c_vfscanf>>('vfscanf');
  late final _dart_vfscanf _vfscanf = _vfscanf_ptr.asFunction<_dart_vfscanf>();

  int vscanf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanf_ptr = _lookup<ffi.NativeFunction<_c_vscanf>>('vscanf');
  late final _dart_vscanf _vscanf = _vscanf_ptr.asFunction<_dart_vscanf>();

  int vsscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanf_ptr = _lookup<ffi.NativeFunction<_c_vsscanf>>('vsscanf');
  late final _dart_vsscanf _vsscanf = _vsscanf_ptr.asFunction<_dart_vsscanf>();

  int fgetc(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetc_ptr = _lookup<ffi.NativeFunction<_c_fgetc>>('fgetc');
  late final _dart_fgetc _fgetc = _fgetc_ptr.asFunction<_dart_fgetc>();

  int getc(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getc_ptr = _lookup<ffi.NativeFunction<_c_getc>>('getc');
  late final _dart_getc _getc = _getc_ptr.asFunction<_dart_getc>();

  int getchar() {
    return _getchar();
  }

  late final _getchar_ptr = _lookup<ffi.NativeFunction<_c_getchar>>('getchar');
  late final _dart_getchar _getchar = _getchar_ptr.asFunction<_dart_getchar>();

  int getc_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_getc_unlocked>>('getc_unlocked');
  late final _dart_getc_unlocked _getc_unlocked =
      _getc_unlocked_ptr.asFunction<_dart_getc_unlocked>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_getchar_unlocked>>('getchar_unlocked');
  late final _dart_getchar_unlocked _getchar_unlocked =
      _getchar_unlocked_ptr.asFunction<_dart_getchar_unlocked>();

  int fgetc_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fgetc_unlocked>>('fgetc_unlocked');
  late final _dart_fgetc_unlocked _fgetc_unlocked =
      _fgetc_unlocked_ptr.asFunction<_dart_fgetc_unlocked>();

  int fputc(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputc_ptr = _lookup<ffi.NativeFunction<_c_fputc>>('fputc');
  late final _dart_fputc _fputc = _fputc_ptr.asFunction<_dart_fputc>();

  int putc(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putc_ptr = _lookup<ffi.NativeFunction<_c_putc>>('putc');
  late final _dart_putc _putc = _putc_ptr.asFunction<_dart_putc>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putchar_ptr = _lookup<ffi.NativeFunction<_c_putchar>>('putchar');
  late final _dart_putchar _putchar = _putchar_ptr.asFunction<_dart_putchar>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fputc_unlocked>>('fputc_unlocked');
  late final _dart_fputc_unlocked _fputc_unlocked =
      _fputc_unlocked_ptr.asFunction<_dart_fputc_unlocked>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_putc_unlocked>>('putc_unlocked');
  late final _dart_putc_unlocked _putc_unlocked =
      _putc_unlocked_ptr.asFunction<_dart_putc_unlocked>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_putchar_unlocked>>('putchar_unlocked');
  late final _dart_putchar_unlocked _putchar_unlocked =
      _putchar_unlocked_ptr.asFunction<_dart_putchar_unlocked>();

  int getw(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getw_ptr = _lookup<ffi.NativeFunction<_c_getw>>('getw');
  late final _dart_getw _getw = _getw_ptr.asFunction<_dart_getw>();

  int putw(
    int __w,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putw_ptr = _lookup<ffi.NativeFunction<_c_putw>>('putw');
  late final _dart_putw _putw = _putw_ptr.asFunction<_dart_putw>();

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgets_ptr = _lookup<ffi.NativeFunction<_c_fgets>>('fgets');
  late final _dart_fgets _fgets = _fgets_ptr.asFunction<_dart_fgets>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Uint64> __n,
    int __delimiter,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelim_ptr =
      _lookup<ffi.NativeFunction<_c___getdelim>>('__getdelim');
  late final _dart___getdelim ___getdelim =
      ___getdelim_ptr.asFunction<_dart___getdelim>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Uint64> __n,
    int __delimiter,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim_ptr =
      _lookup<ffi.NativeFunction<_c_getdelim>>('getdelim');
  late final _dart_getdelim _getdelim =
      _getdelim_ptr.asFunction<_dart_getdelim>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Uint64> __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getline_ptr = _lookup<ffi.NativeFunction<_c_getline>>('getline');
  late final _dart_getline _getline = _getline_ptr.asFunction<_dart_getline>();

  int fputs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputs_ptr = _lookup<ffi.NativeFunction<_c_fputs>>('fputs');
  late final _dart_fputs _fputs = _fputs_ptr.asFunction<_dart_fputs>();

  int puts(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _puts_ptr = _lookup<ffi.NativeFunction<_c_puts>>('puts');
  late final _dart_puts _puts = _puts_ptr.asFunction<_dart_puts>();

  int ungetc(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetc_ptr = _lookup<ffi.NativeFunction<_c_ungetc>>('ungetc');
  late final _dart_ungetc _ungetc = _ungetc_ptr.asFunction<_dart_ungetc>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_ptr = _lookup<ffi.NativeFunction<_c_fread>>('fread');
  late final _dart_fread _fread = _fread_ptr.asFunction<_dart_fread>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<_IO_FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwrite_ptr = _lookup<ffi.NativeFunction<_c_fwrite>>('fwrite');
  late final _dart_fwrite _fwrite = _fwrite_ptr.asFunction<_dart_fwrite>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fread_unlocked>>('fread_unlocked');
  late final _dart_fread_unlocked _fread_unlocked =
      _fread_unlocked_ptr.asFunction<_dart_fread_unlocked>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fwrite_unlocked>>('fwrite_unlocked');
  late final _dart_fwrite_unlocked _fwrite_unlocked =
      _fwrite_unlocked_ptr.asFunction<_dart_fwrite_unlocked>();

  int fseek(
    ffi.Pointer<_IO_FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseek_ptr = _lookup<ffi.NativeFunction<_c_fseek>>('fseek');
  late final _dart_fseek _fseek = _fseek_ptr.asFunction<_dart_fseek>();

  int ftell(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftell_ptr = _lookup<ffi.NativeFunction<_c_ftell>>('ftell');
  late final _dart_ftell _ftell = _ftell_ptr.asFunction<_dart_ftell>();

  void rewind(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewind_ptr = _lookup<ffi.NativeFunction<_c_rewind>>('rewind');
  late final _dart_rewind _rewind = _rewind_ptr.asFunction<_dart_rewind>();

  int fseeko(
    ffi.Pointer<_IO_FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseeko_ptr = _lookup<ffi.NativeFunction<_c_fseeko>>('fseeko');
  late final _dart_fseeko _fseeko = _fseeko_ptr.asFunction<_dart_fseeko>();

  int ftello(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftello_ptr = _lookup<ffi.NativeFunction<_c_ftello>>('ftello');
  late final _dart_ftello _ftello = _ftello_ptr.asFunction<_dart_ftello>();

  int fgetpos(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<__fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetpos_ptr = _lookup<ffi.NativeFunction<_c_fgetpos>>('fgetpos');
  late final _dart_fgetpos _fgetpos = _fgetpos_ptr.asFunction<_dart_fgetpos>();

  int fsetpos(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<__fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetpos_ptr = _lookup<ffi.NativeFunction<_c_fsetpos>>('fsetpos');
  late final _dart_fsetpos _fsetpos = _fsetpos_ptr.asFunction<_dart_fsetpos>();

  void clearerr(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerr_ptr =
      _lookup<ffi.NativeFunction<_c_clearerr>>('clearerr');
  late final _dart_clearerr _clearerr =
      _clearerr_ptr.asFunction<_dart_clearerr>();

  int feof(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feof_ptr = _lookup<ffi.NativeFunction<_c_feof>>('feof');
  late final _dart_feof _feof = _feof_ptr.asFunction<_dart_feof>();

  int ferror(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferror_ptr = _lookup<ffi.NativeFunction<_c_ferror>>('ferror');
  late final _dart_ferror _ferror = _ferror_ptr.asFunction<_dart_ferror>();

  void clearerr_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_clearerr_unlocked>>('clearerr_unlocked');
  late final _dart_clearerr_unlocked _clearerr_unlocked =
      _clearerr_unlocked_ptr.asFunction<_dart_clearerr_unlocked>();

  int feof_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_feof_unlocked>>('feof_unlocked');
  late final _dart_feof_unlocked _feof_unlocked =
      _feof_unlocked_ptr.asFunction<_dart_feof_unlocked>();

  int ferror_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_ferror_unlocked>>('ferror_unlocked');
  late final _dart_ferror_unlocked _ferror_unlocked =
      _ferror_unlocked_ptr.asFunction<_dart_ferror_unlocked>();

  void perror(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perror_ptr = _lookup<ffi.NativeFunction<_c_perror>>('perror');
  late final _dart_perror _perror = _perror_ptr.asFunction<_dart_perror>();

  late final ffi.Pointer<ffi.Int32> _sys_nerr = _lookup<ffi.Int32>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _sys_errlist.value = value;

  int fileno(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _fileno_ptr = _lookup<ffi.NativeFunction<_c_fileno>>('fileno');
  late final _dart_fileno _fileno = _fileno_ptr.asFunction<_dart_fileno>();

  int fileno_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_fileno_unlocked>>('fileno_unlocked');
  late final _dart_fileno_unlocked _fileno_unlocked =
      _fileno_unlocked_ptr.asFunction<_dart_fileno_unlocked>();

  ffi.Pointer<_IO_FILE> popen(
    ffi.Pointer<ffi.Int8> __command,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popen_ptr = _lookup<ffi.NativeFunction<_c_popen>>('popen');
  late final _dart_popen _popen = _popen_ptr.asFunction<_dart_popen>();

  int pclose(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclose_ptr = _lookup<ffi.NativeFunction<_c_pclose>>('pclose');
  late final _dart_pclose _pclose = _pclose_ptr.asFunction<_dart_pclose>();

  ffi.Pointer<ffi.Int8> ctermid(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermid_ptr = _lookup<ffi.NativeFunction<_c_ctermid>>('ctermid');
  late final _dart_ctermid _ctermid = _ctermid_ptr.asFunction<_dart_ctermid>();

  void flockfile(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfile_ptr =
      _lookup<ffi.NativeFunction<_c_flockfile>>('flockfile');
  late final _dart_flockfile _flockfile =
      _flockfile_ptr.asFunction<_dart_flockfile>();

  int ftrylockfile(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfile_ptr =
      _lookup<ffi.NativeFunction<_c_ftrylockfile>>('ftrylockfile');
  late final _dart_ftrylockfile _ftrylockfile =
      _ftrylockfile_ptr.asFunction<_dart_ftrylockfile>();

  void funlockfile(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfile_ptr =
      _lookup<ffi.NativeFunction<_c_funlockfile>>('funlockfile');
  late final _dart_funlockfile _funlockfile =
      _funlockfile_ptr.asFunction<_dart_funlockfile>();

  int __uflow(
    ffi.Pointer<_IO_FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflow_ptr = _lookup<ffi.NativeFunction<_c___uflow>>('__uflow');
  late final _dart___uflow ___uflow = ___uflow_ptr.asFunction<_dart___uflow>();

  int __overflow(
    ffi.Pointer<_IO_FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflow_ptr =
      _lookup<ffi.NativeFunction<_c___overflow>>('__overflow');
  late final _dart___overflow ___overflow =
      ___overflow_ptr.asFunction<_dart___overflow>();

  void luaL_checkversion_(
    ffi.Pointer<lua_State> L,
    double ver,
    int sz,
  ) {
    return _luaL_checkversion_(
      L,
      ver,
      sz,
    );
  }

  late final _luaL_checkversion__ptr =
      _lookup<ffi.NativeFunction<_c_luaL_checkversion_>>('luaL_checkversion_');
  late final _dart_luaL_checkversion_ _luaL_checkversion_ =
      _luaL_checkversion__ptr.asFunction<_dart_luaL_checkversion_>();

  int luaL_getmetafield(
    ffi.Pointer<lua_State> L,
    int obj,
    ffi.Pointer<ffi.Int8> e,
  ) {
    return _luaL_getmetafield(
      L,
      obj,
      e,
    );
  }

  late final _luaL_getmetafield_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_getmetafield>>('luaL_getmetafield');
  late final _dart_luaL_getmetafield _luaL_getmetafield =
      _luaL_getmetafield_ptr.asFunction<_dart_luaL_getmetafield>();

  int luaL_callmeta(
    ffi.Pointer<lua_State> L,
    int obj,
    ffi.Pointer<ffi.Int8> e,
  ) {
    return _luaL_callmeta(
      L,
      obj,
      e,
    );
  }

  late final _luaL_callmeta_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_callmeta>>('luaL_callmeta');
  late final _dart_luaL_callmeta _luaL_callmeta =
      _luaL_callmeta_ptr.asFunction<_dart_luaL_callmeta>();

  ffi.Pointer<ffi.Int8> luaL_tolstring(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Uint64> len,
  ) {
    return _luaL_tolstring(
      L,
      idx,
      len,
    );
  }

  late final _luaL_tolstring_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_tolstring>>('luaL_tolstring');
  late final _dart_luaL_tolstring _luaL_tolstring =
      _luaL_tolstring_ptr.asFunction<_dart_luaL_tolstring>();

  int luaL_argerror(
    ffi.Pointer<lua_State> L,
    int arg,
    ffi.Pointer<ffi.Int8> extramsg,
  ) {
    return _luaL_argerror(
      L,
      arg,
      extramsg,
    );
  }

  late final _luaL_argerror_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_argerror>>('luaL_argerror');
  late final _dart_luaL_argerror _luaL_argerror =
      _luaL_argerror_ptr.asFunction<_dart_luaL_argerror>();

  int luaL_typeerror(
    ffi.Pointer<lua_State> L,
    int arg,
    ffi.Pointer<ffi.Int8> tname,
  ) {
    return _luaL_typeerror(
      L,
      arg,
      tname,
    );
  }

  late final _luaL_typeerror_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_typeerror>>('luaL_typeerror');
  late final _dart_luaL_typeerror _luaL_typeerror =
      _luaL_typeerror_ptr.asFunction<_dart_luaL_typeerror>();

  ffi.Pointer<ffi.Int8> luaL_checklstring(
    ffi.Pointer<lua_State> L,
    int arg,
    ffi.Pointer<ffi.Uint64> l,
  ) {
    return _luaL_checklstring(
      L,
      arg,
      l,
    );
  }

  late final _luaL_checklstring_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_checklstring>>('luaL_checklstring');
  late final _dart_luaL_checklstring _luaL_checklstring =
      _luaL_checklstring_ptr.asFunction<_dart_luaL_checklstring>();

  ffi.Pointer<ffi.Int8> luaL_optlstring(
    ffi.Pointer<lua_State> L,
    int arg,
    ffi.Pointer<ffi.Int8> def,
    ffi.Pointer<ffi.Uint64> l,
  ) {
    return _luaL_optlstring(
      L,
      arg,
      def,
      l,
    );
  }

  late final _luaL_optlstring_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_optlstring>>('luaL_optlstring');
  late final _dart_luaL_optlstring _luaL_optlstring =
      _luaL_optlstring_ptr.asFunction<_dart_luaL_optlstring>();

  double luaL_checknumber(
    ffi.Pointer<lua_State> L,
    int arg,
  ) {
    return _luaL_checknumber(
      L,
      arg,
    );
  }

  late final _luaL_checknumber_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_checknumber>>('luaL_checknumber');
  late final _dart_luaL_checknumber _luaL_checknumber =
      _luaL_checknumber_ptr.asFunction<_dart_luaL_checknumber>();

  double luaL_optnumber(
    ffi.Pointer<lua_State> L,
    int arg,
    double def,
  ) {
    return _luaL_optnumber(
      L,
      arg,
      def,
    );
  }

  late final _luaL_optnumber_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_optnumber>>('luaL_optnumber');
  late final _dart_luaL_optnumber _luaL_optnumber =
      _luaL_optnumber_ptr.asFunction<_dart_luaL_optnumber>();

  int luaL_checkinteger(
    ffi.Pointer<lua_State> L,
    int arg,
  ) {
    return _luaL_checkinteger(
      L,
      arg,
    );
  }

  late final _luaL_checkinteger_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_checkinteger>>('luaL_checkinteger');
  late final _dart_luaL_checkinteger _luaL_checkinteger =
      _luaL_checkinteger_ptr.asFunction<_dart_luaL_checkinteger>();

  int luaL_optinteger(
    ffi.Pointer<lua_State> L,
    int arg,
    int def,
  ) {
    return _luaL_optinteger(
      L,
      arg,
      def,
    );
  }

  late final _luaL_optinteger_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_optinteger>>('luaL_optinteger');
  late final _dart_luaL_optinteger _luaL_optinteger =
      _luaL_optinteger_ptr.asFunction<_dart_luaL_optinteger>();

  void luaL_checkstack(
    ffi.Pointer<lua_State> L,
    int sz,
    ffi.Pointer<ffi.Int8> msg,
  ) {
    return _luaL_checkstack(
      L,
      sz,
      msg,
    );
  }

  late final _luaL_checkstack_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_checkstack>>('luaL_checkstack');
  late final _dart_luaL_checkstack _luaL_checkstack =
      _luaL_checkstack_ptr.asFunction<_dart_luaL_checkstack>();

  void luaL_checktype(
    ffi.Pointer<lua_State> L,
    int arg,
    int t,
  ) {
    return _luaL_checktype(
      L,
      arg,
      t,
    );
  }

  late final _luaL_checktype_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_checktype>>('luaL_checktype');
  late final _dart_luaL_checktype _luaL_checktype =
      _luaL_checktype_ptr.asFunction<_dart_luaL_checktype>();

  void luaL_checkany(
    ffi.Pointer<lua_State> L,
    int arg,
  ) {
    return _luaL_checkany(
      L,
      arg,
    );
  }

  late final _luaL_checkany_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_checkany>>('luaL_checkany');
  late final _dart_luaL_checkany _luaL_checkany =
      _luaL_checkany_ptr.asFunction<_dart_luaL_checkany>();

  int luaL_newmetatable(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> tname,
  ) {
    return _luaL_newmetatable(
      L,
      tname,
    );
  }

  late final _luaL_newmetatable_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_newmetatable>>('luaL_newmetatable');
  late final _dart_luaL_newmetatable _luaL_newmetatable =
      _luaL_newmetatable_ptr.asFunction<_dart_luaL_newmetatable>();

  void luaL_setmetatable(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> tname,
  ) {
    return _luaL_setmetatable(
      L,
      tname,
    );
  }

  late final _luaL_setmetatable_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_setmetatable>>('luaL_setmetatable');
  late final _dart_luaL_setmetatable _luaL_setmetatable =
      _luaL_setmetatable_ptr.asFunction<_dart_luaL_setmetatable>();

  ffi.Pointer<ffi.Void> luaL_testudata(
    ffi.Pointer<lua_State> L,
    int ud,
    ffi.Pointer<ffi.Int8> tname,
  ) {
    return _luaL_testudata(
      L,
      ud,
      tname,
    );
  }

  late final _luaL_testudata_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_testudata>>('luaL_testudata');
  late final _dart_luaL_testudata _luaL_testudata =
      _luaL_testudata_ptr.asFunction<_dart_luaL_testudata>();

  ffi.Pointer<ffi.Void> luaL_checkudata(
    ffi.Pointer<lua_State> L,
    int ud,
    ffi.Pointer<ffi.Int8> tname,
  ) {
    return _luaL_checkudata(
      L,
      ud,
      tname,
    );
  }

  late final _luaL_checkudata_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_checkudata>>('luaL_checkudata');
  late final _dart_luaL_checkudata _luaL_checkudata =
      _luaL_checkudata_ptr.asFunction<_dart_luaL_checkudata>();

  void luaL_where(
    ffi.Pointer<lua_State> L,
    int lvl,
  ) {
    return _luaL_where(
      L,
      lvl,
    );
  }

  late final _luaL_where_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_where>>('luaL_where');
  late final _dart_luaL_where _luaL_where =
      _luaL_where_ptr.asFunction<_dart_luaL_where>();

  int luaL_error(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _luaL_error(
      L,
      fmt,
    );
  }

  late final _luaL_error_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_error>>('luaL_error');
  late final _dart_luaL_error _luaL_error =
      _luaL_error_ptr.asFunction<_dart_luaL_error>();

  int luaL_checkoption(
    ffi.Pointer<lua_State> L,
    int arg,
    ffi.Pointer<ffi.Int8> def,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> lst,
  ) {
    return _luaL_checkoption(
      L,
      arg,
      def,
      lst,
    );
  }

  late final _luaL_checkoption_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_checkoption>>('luaL_checkoption');
  late final _dart_luaL_checkoption _luaL_checkoption =
      _luaL_checkoption_ptr.asFunction<_dart_luaL_checkoption>();

  int luaL_fileresult(
    ffi.Pointer<lua_State> L,
    int stat,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return _luaL_fileresult(
      L,
      stat,
      fname,
    );
  }

  late final _luaL_fileresult_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_fileresult>>('luaL_fileresult');
  late final _dart_luaL_fileresult _luaL_fileresult =
      _luaL_fileresult_ptr.asFunction<_dart_luaL_fileresult>();

  int luaL_execresult(
    ffi.Pointer<lua_State> L,
    int stat,
  ) {
    return _luaL_execresult(
      L,
      stat,
    );
  }

  late final _luaL_execresult_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_execresult>>('luaL_execresult');
  late final _dart_luaL_execresult _luaL_execresult =
      _luaL_execresult_ptr.asFunction<_dart_luaL_execresult>();

  int luaL_ref(
    ffi.Pointer<lua_State> L,
    int t,
  ) {
    return _luaL_ref(
      L,
      t,
    );
  }

  late final _luaL_ref_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_ref>>('luaL_ref');
  late final _dart_luaL_ref _luaL_ref =
      _luaL_ref_ptr.asFunction<_dart_luaL_ref>();

  void luaL_unref(
    ffi.Pointer<lua_State> L,
    int t,
    int ref,
  ) {
    return _luaL_unref(
      L,
      t,
      ref,
    );
  }

  late final _luaL_unref_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_unref>>('luaL_unref');
  late final _dart_luaL_unref _luaL_unref =
      _luaL_unref_ptr.asFunction<_dart_luaL_unref>();

  int luaL_loadfilex(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> mode,
  ) {
    return _luaL_loadfilex(
      L,
      filename,
      mode,
    );
  }

  late final _luaL_loadfilex_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_loadfilex>>('luaL_loadfilex');
  late final _dart_luaL_loadfilex _luaL_loadfilex =
      _luaL_loadfilex_ptr.asFunction<_dart_luaL_loadfilex>();

  int luaL_loadbufferx(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> buff,
    int sz,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> mode,
  ) {
    return _luaL_loadbufferx(
      L,
      buff,
      sz,
      name,
      mode,
    );
  }

  late final _luaL_loadbufferx_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_loadbufferx>>('luaL_loadbufferx');
  late final _dart_luaL_loadbufferx _luaL_loadbufferx =
      _luaL_loadbufferx_ptr.asFunction<_dart_luaL_loadbufferx>();

  int luaL_loadstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _luaL_loadstring(
      L,
      s,
    );
  }

  late final _luaL_loadstring_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_loadstring>>('luaL_loadstring');
  late final _dart_luaL_loadstring _luaL_loadstring =
      _luaL_loadstring_ptr.asFunction<_dart_luaL_loadstring>();

  ffi.Pointer<lua_State> luaL_newstate() {
    return _luaL_newstate();
  }

  late final _luaL_newstate_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_newstate>>('luaL_newstate');
  late final _dart_luaL_newstate _luaL_newstate =
      _luaL_newstate_ptr.asFunction<_dart_luaL_newstate>();

  int luaL_len(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _luaL_len(
      L,
      idx,
    );
  }

  late final _luaL_len_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_len>>('luaL_len');
  late final _dart_luaL_len _luaL_len =
      _luaL_len_ptr.asFunction<_dart_luaL_len>();

  void luaL_addgsub(
    ffi.Pointer<luaL_Buffer> b,
    ffi.Pointer<ffi.Int8> s,
    ffi.Pointer<ffi.Int8> p,
    ffi.Pointer<ffi.Int8> r,
  ) {
    return _luaL_addgsub(
      b,
      s,
      p,
      r,
    );
  }

  late final _luaL_addgsub_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_addgsub>>('luaL_addgsub');
  late final _dart_luaL_addgsub _luaL_addgsub =
      _luaL_addgsub_ptr.asFunction<_dart_luaL_addgsub>();

  ffi.Pointer<ffi.Int8> luaL_gsub(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> s,
    ffi.Pointer<ffi.Int8> p,
    ffi.Pointer<ffi.Int8> r,
  ) {
    return _luaL_gsub(
      L,
      s,
      p,
      r,
    );
  }

  late final _luaL_gsub_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_gsub>>('luaL_gsub');
  late final _dart_luaL_gsub _luaL_gsub =
      _luaL_gsub_ptr.asFunction<_dart_luaL_gsub>();

  void luaL_setfuncs(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<luaL_Reg> l,
    int nup,
  ) {
    return _luaL_setfuncs(
      L,
      l,
      nup,
    );
  }

  late final _luaL_setfuncs_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_setfuncs>>('luaL_setfuncs');
  late final _dart_luaL_setfuncs _luaL_setfuncs =
      _luaL_setfuncs_ptr.asFunction<_dart_luaL_setfuncs>();

  int luaL_getsubtable(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return _luaL_getsubtable(
      L,
      idx,
      fname,
    );
  }

  late final _luaL_getsubtable_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_getsubtable>>('luaL_getsubtable');
  late final _dart_luaL_getsubtable _luaL_getsubtable =
      _luaL_getsubtable_ptr.asFunction<_dart_luaL_getsubtable>();

  void luaL_traceback(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<lua_State> L1,
    ffi.Pointer<ffi.Int8> msg,
    int level,
  ) {
    return _luaL_traceback(
      L,
      L1,
      msg,
      level,
    );
  }

  late final _luaL_traceback_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_traceback>>('luaL_traceback');
  late final _dart_luaL_traceback _luaL_traceback =
      _luaL_traceback_ptr.asFunction<_dart_luaL_traceback>();

  void luaL_requiref(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> modname,
    ffi.Pointer<ffi.NativeFunction<lua_CFunction>> openf,
    int glb,
  ) {
    return _luaL_requiref(
      L,
      modname,
      openf,
      glb,
    );
  }

  late final _luaL_requiref_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_requiref>>('luaL_requiref');
  late final _dart_luaL_requiref _luaL_requiref =
      _luaL_requiref_ptr.asFunction<_dart_luaL_requiref>();

  void luaL_buffinit(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<luaL_Buffer> B,
  ) {
    return _luaL_buffinit(
      L,
      B,
    );
  }

  late final _luaL_buffinit_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_buffinit>>('luaL_buffinit');
  late final _dart_luaL_buffinit _luaL_buffinit =
      _luaL_buffinit_ptr.asFunction<_dart_luaL_buffinit>();

  ffi.Pointer<ffi.Int8> luaL_prepbuffsize(
    ffi.Pointer<luaL_Buffer> B,
    int sz,
  ) {
    return _luaL_prepbuffsize(
      B,
      sz,
    );
  }

  late final _luaL_prepbuffsize_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_prepbuffsize>>('luaL_prepbuffsize');
  late final _dart_luaL_prepbuffsize _luaL_prepbuffsize =
      _luaL_prepbuffsize_ptr.asFunction<_dart_luaL_prepbuffsize>();

  void luaL_addlstring(
    ffi.Pointer<luaL_Buffer> B,
    ffi.Pointer<ffi.Int8> s,
    int l,
  ) {
    return _luaL_addlstring(
      B,
      s,
      l,
    );
  }

  late final _luaL_addlstring_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_addlstring>>('luaL_addlstring');
  late final _dart_luaL_addlstring _luaL_addlstring =
      _luaL_addlstring_ptr.asFunction<_dart_luaL_addlstring>();

  void luaL_addstring(
    ffi.Pointer<luaL_Buffer> B,
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _luaL_addstring(
      B,
      s,
    );
  }

  late final _luaL_addstring_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_addstring>>('luaL_addstring');
  late final _dart_luaL_addstring _luaL_addstring =
      _luaL_addstring_ptr.asFunction<_dart_luaL_addstring>();

  void luaL_addvalue(
    ffi.Pointer<luaL_Buffer> B,
  ) {
    return _luaL_addvalue(
      B,
    );
  }

  late final _luaL_addvalue_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_addvalue>>('luaL_addvalue');
  late final _dart_luaL_addvalue _luaL_addvalue =
      _luaL_addvalue_ptr.asFunction<_dart_luaL_addvalue>();

  void luaL_pushresult(
    ffi.Pointer<luaL_Buffer> B,
  ) {
    return _luaL_pushresult(
      B,
    );
  }

  late final _luaL_pushresult_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_pushresult>>('luaL_pushresult');
  late final _dart_luaL_pushresult _luaL_pushresult =
      _luaL_pushresult_ptr.asFunction<_dart_luaL_pushresult>();

  void luaL_pushresultsize(
    ffi.Pointer<luaL_Buffer> B,
    int sz,
  ) {
    return _luaL_pushresultsize(
      B,
      sz,
    );
  }

  late final _luaL_pushresultsize_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_pushresultsize>>(
          'luaL_pushresultsize');
  late final _dart_luaL_pushresultsize _luaL_pushresultsize =
      _luaL_pushresultsize_ptr.asFunction<_dart_luaL_pushresultsize>();

  ffi.Pointer<ffi.Int8> luaL_buffinitsize(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<luaL_Buffer> B,
    int sz,
  ) {
    return _luaL_buffinitsize(
      L,
      B,
      sz,
    );
  }

  late final _luaL_buffinitsize_ptr =
      _lookup<ffi.NativeFunction<_c_luaL_buffinitsize>>('luaL_buffinitsize');
  late final _dart_luaL_buffinitsize _luaL_buffinitsize =
      _luaL_buffinitsize_ptr.asFunction<_dart_luaL_buffinitsize>();

  GameState setup_game_state(
    ffi.Pointer<lua_State> state,
  ) {
    return _setup_game_state(
      state,
    );
  }

  late final _setup_game_state_ptr =
      _lookup<ffi.NativeFunction<_c_setup_game_state>>('setup_game_state');
  late final _dart_setup_game_state _setup_game_state =
      _setup_game_state_ptr.asFunction<_dart_setup_game_state>();

  void move_right_thirty(
    ffi.Pointer<lua_State> state,
  ) {
    return _move_right_thirty(
      state,
    );
  }

  late final _move_right_thirty_ptr =
      _lookup<ffi.NativeFunction<_c_move_right_thirty>>('move_right_thirty');
  late final _dart_move_right_thirty _move_right_thirty =
      _move_right_thirty_ptr.asFunction<_dart_move_right_thirty>();

  void register_functions(
    ffi.Pointer<lua_State> state,
  ) {
    return _register_functions(
      state,
    );
  }

  late final _register_functions_ptr =
      _lookup<ffi.NativeFunction<_c_register_functions>>('register_functions');
  late final _dart_register_functions _register_functions =
      _register_functions_ptr.asFunction<_dart_register_functions>();

  void setup_globals(
    ffi.Pointer<lua_State> state,
  ) {
    return _setup_globals(
      state,
    );
  }

  late final _setup_globals_ptr =
      _lookup<ffi.NativeFunction<_c_setup_globals>>('setup_globals');
  late final _dart_setup_globals _setup_globals =
      _setup_globals_ptr.asFunction<_dart_setup_globals>();

  void print_stacktrace() {
    return _print_stacktrace();
  }

  late final _print_stacktrace_ptr =
      _lookup<ffi.NativeFunction<_c_print_stacktrace>>('print_stacktrace');
  late final _dart_print_stacktrace _print_stacktrace =
      _print_stacktrace_ptr.asFunction<_dart_print_stacktrace>();

  void check_ok(
    int is_ok,
    ffi.Pointer<lua_State> state,
  ) {
    return _check_ok(
      is_ok,
      state,
    );
  }

  late final _check_ok_ptr =
      _lookup<ffi.NativeFunction<_c_check_ok>>('check_ok');
  late final _dart_check_ok _check_ok =
      _check_ok_ptr.asFunction<_dart_check_ok>();

  int lua_flame_plugin_get_type() {
    return _lua_flame_plugin_get_type();
  }

  late final _lua_flame_plugin_get_type_ptr =
      _lookup<ffi.NativeFunction<_c_lua_flame_plugin_get_type>>(
          'lua_flame_plugin_get_type');
  late final _dart_lua_flame_plugin_get_type _lua_flame_plugin_get_type =
      _lua_flame_plugin_get_type_ptr
          .asFunction<_dart_lua_flame_plugin_get_type>();

  void lua_flame_plugin_register_with_registrar(
    ffi.Pointer<ffi.Int32> registrar,
  ) {
    return _lua_flame_plugin_register_with_registrar(
      registrar,
    );
  }

  late final _lua_flame_plugin_register_with_registrar_ptr =
      _lookup<ffi.NativeFunction<_c_lua_flame_plugin_register_with_registrar>>(
          'lua_flame_plugin_register_with_registrar');
  late final _dart_lua_flame_plugin_register_with_registrar
      _lua_flame_plugin_register_with_registrar =
      _lua_flame_plugin_register_with_registrar_ptr
          .asFunction<_dart_lua_flame_plugin_register_with_registrar>();
}

class max_align_t extends ffi.Opaque {}

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> __val;
}

class lua_State extends ffi.Opaque {}

class CallInfo extends ffi.Opaque {}

class lua_Debug extends ffi.Struct {
  @ffi.Int32()
  external int event;

  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> namewhat;

  external ffi.Pointer<ffi.Int8> what;

  external ffi.Pointer<ffi.Int8> source;

  @ffi.Uint64()
  external int srclen;

  @ffi.Int32()
  external int currentline;

  @ffi.Int32()
  external int linedefined;

  @ffi.Int32()
  external int lastlinedefined;

  @ffi.Uint8()
  external int nups;

  @ffi.Uint8()
  external int nparams;

  @ffi.Int8()
  external int isvararg;

  @ffi.Int8()
  external int istailcall;

  @ffi.Uint16()
  external int ftransfer;

  @ffi.Uint16()
  external int ntransfer;

  @ffi.Array.multi([60])
  external ffi.Array<ffi.Int8> short_src;

  external ffi.Pointer<CallInfo> i_ci;
}

class __mbstate_t extends ffi.Opaque {}

class __fpos_t extends ffi.Opaque {}

class __fpos64_t extends ffi.Opaque {}

class _IO_marker extends ffi.Opaque {}

class _IO_codecvt extends ffi.Opaque {}

class _IO_wide_data extends ffi.Opaque {}

class _IO_FILE extends ffi.Struct {
  @ffi.Int32()
  external int _flags;

  external ffi.Pointer<ffi.Int8> _IO_read_ptr;

  external ffi.Pointer<ffi.Int8> _IO_read_end;

  external ffi.Pointer<ffi.Int8> _IO_read_base;

  external ffi.Pointer<ffi.Int8> _IO_write_base;

  external ffi.Pointer<ffi.Int8> _IO_write_ptr;

  external ffi.Pointer<ffi.Int8> _IO_write_end;

  external ffi.Pointer<ffi.Int8> _IO_buf_base;

  external ffi.Pointer<ffi.Int8> _IO_buf_end;

  external ffi.Pointer<ffi.Int8> _IO_save_base;

  external ffi.Pointer<ffi.Int8> _IO_backup_base;

  external ffi.Pointer<ffi.Int8> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int32()
  external int _fileno;

  @ffi.Int32()
  external int _flags2;

  @ffi.Int64()
  external int _old_offset;

  @ffi.Uint16()
  external int _cur_column;

  @ffi.Int8()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Int8> _shortbuf;

  external ffi.Pointer<ffi.Void> _lock;

  @ffi.Int64()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Uint64()
  external int __pad5;

  @ffi.Int32()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Int8> _unused2;
}

class __va_list_tag extends ffi.Struct {
  @ffi.Uint32()
  external int gp_offset;

  @ffi.Uint32()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

class luaL_Buffer extends ffi.Opaque {}

class luaL_Reg extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.NativeFunction<lua_CFunction>> func;
}

class luaL_Stream extends ffi.Struct {
  external ffi.Pointer<_IO_FILE> f;

  external ffi.Pointer<ffi.NativeFunction<lua_CFunction>> closef;
}

class GameState extends ffi.Struct {
  @ffi.Uint32()
  external int component_1_x;

  @ffi.Uint32()
  external int component_1_y;
}

class _LuaFlamePlugin extends ffi.Opaque {}

class LuaFlamePluginClass extends ffi.Struct {
  @ffi.Int32()
  external int parent_class;
}

const int __GNUC_VA_LIST = 1;

const int NULL = 0;

const int _LIBC_LIMITS_H_ = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 31;

const int _SYS_CDEFS_H = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __LONG_DOUBLE_USES_FLOAT128 = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int MB_LEN_MAX = 16;

const int LLONG_MIN = -9223372036854775808;

const int LLONG_MAX = 9223372036854775807;

const int ULLONG_MAX = -1;

const int _BITS_POSIX1_LIM_H = 1;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int NGROUPS_MAX = 65536;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int PTHREAD_KEYS_MAX = 1024;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int AIO_PRIO_DELTA_MAX = 20;

const int PTHREAD_STACK_MIN = 16384;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int SSIZE_MAX = 9223372036854775807;

const int _BITS_POSIX2_LIM_H = 1;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int SCHAR_MAX = 127;

const int SHRT_MAX = 32767;

const int INT_MAX = 2147483647;

const int LONG_MAX = 9223372036854775807;

const int SCHAR_MIN = -128;

const int SHRT_MIN = -32768;

const int INT_MIN = -2147483648;

const int LONG_MIN = -9223372036854775808;

const int UCHAR_MAX = 255;

const int USHRT_MAX = 65535;

const int UINT_MAX = 4294967295;

const int ULONG_MAX = -1;

const int CHAR_BIT = 8;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int LUAI_IS32INT = 1;

const int LUA_INT_INT = 1;

const int LUA_INT_LONG = 2;

const int LUA_INT_LONGLONG = 3;

const int LUA_FLOAT_FLOAT = 1;

const int LUA_FLOAT_DOUBLE = 2;

const int LUA_FLOAT_LONGDOUBLE = 3;

const int LUA_INT_TYPE = 3;

const int LUA_FLOAT_TYPE = 2;

const String LUA_PATH_SEP = ';';

const String LUA_PATH_MARK = '?';

const String LUA_EXEC_DIR = '!';

const String LUA_VDIR = '5.4';

const String DEB_HOST_MULTIARCH = 'x86_64-linux-gnu';

const String LUA_ROOT = '/usr/local/';

const String LUA_ROOT2 = '/usr/';

const String LUA_LDIR = '/usr/local/share/lua/5.4/';

const String LUA_LDIR2 = '/usr/share/lua/5.4/';

const String LUA_CDIR = '/usr/local/lib/lua/5.4/';

const String LUA_CDIR2 = '/usr/lib/x86_64-linux-gnu/lua/5.4/';

const String LUA_CDIR3 = '/usr/lib/lua/5.4/';

const String LUA_PATH_DEFAULT =
    '/usr/local/share/lua/5.4/?.lua;/usr/local/share/lua/5.4/?/init.lua;/usr/local/lib/lua/5.4/?.lua;/usr/local/lib/lua/5.4/?/init.lua;/usr/share/lua/5.4/?.lua;/usr/share/lua/5.4/?/init.lua;./?.lua;./?/init.lua';

const String LUA_CPATH_DEFAULT =
    '/usr/local/lib/lua/5.4/?.so;/usr/lib/x86_64-linux-gnu/lua/5.4/?.so;/usr/lib/lua/5.4/?.so;/usr/local/lib/lua/5.4/loadall.so;./?.so';

const String LUA_DIRSEP = '/';

const String LUA_NUMBER_FRMLEN = '';

const String LUA_NUMBER_FMT = '%.14g';

const String LUA_INTEGER_FMT = '%lld';

const int LUA_UNSIGNEDBITS = 64;

const String LUA_INTEGER_FRMLEN = 'll';

const int LUA_MAXINTEGER = 9223372036854775807;

const int LUA_MININTEGER = -9223372036854775808;

const int LUA_MAXUNSIGNED = -1;

const int _BITS_TYPES_H = 1;

const int __TIMESIZE = 64;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int LUAI_MAXSTACK = 1000000;

const int LUA_EXTRASPACE = 8;

const int LUA_IDSIZE = 60;

const int LUAL_BUFFERSIZE = 1024;

const String LUA_VERSION_MAJOR = '5';

const String LUA_VERSION_MINOR = '4';

const String LUA_VERSION_RELEASE = '2';

const int LUA_VERSION_NUM = 504;

const int LUA_VERSION_RELEASE_NUM = 50400;

const String LUA_VERSION = 'Lua 5.4';

const String LUA_RELEASE = 'Lua 5.4.2';

const String LUA_COPYRIGHT =
    'Lua 5.4.2  Copyright (C) 1994-2020 Lua.org, PUC-Rio';

const String LUA_AUTHORS = 'R. Ierusalimschy, L. H. de Figueiredo, W. Celes';

const String LUA_SIGNATURE = '\x1BLua';

const int LUA_MULTRET = -1;

const int LUA_REGISTRYINDEX = -1001000;

const int LUA_OK = 0;

const int LUA_YIELD = 1;

const int LUA_ERRRUN = 2;

const int LUA_ERRSYNTAX = 3;

const int LUA_ERRMEM = 4;

const int LUA_ERRERR = 5;

const int LUA_TNONE = -1;

const int LUA_TNIL = 0;

const int LUA_TBOOLEAN = 1;

const int LUA_TLIGHTUSERDATA = 2;

const int LUA_TNUMBER = 3;

const int LUA_TSTRING = 4;

const int LUA_TTABLE = 5;

const int LUA_TFUNCTION = 6;

const int LUA_TUSERDATA = 7;

const int LUA_TTHREAD = 8;

const int LUA_NUMTYPES = 9;

const int LUA_MINSTACK = 20;

const int LUA_RIDX_MAINTHREAD = 1;

const int LUA_RIDX_GLOBALS = 2;

const int LUA_RIDX_LAST = 2;

const int LUA_OPADD = 0;

const int LUA_OPSUB = 1;

const int LUA_OPMUL = 2;

const int LUA_OPMOD = 3;

const int LUA_OPPOW = 4;

const int LUA_OPDIV = 5;

const int LUA_OPIDIV = 6;

const int LUA_OPBAND = 7;

const int LUA_OPBOR = 8;

const int LUA_OPBXOR = 9;

const int LUA_OPSHL = 10;

const int LUA_OPSHR = 11;

const int LUA_OPUNM = 12;

const int LUA_OPBNOT = 13;

const int LUA_OPEQ = 0;

const int LUA_OPLT = 1;

const int LUA_OPLE = 2;

const int LUA_GCSTOP = 0;

const int LUA_GCRESTART = 1;

const int LUA_GCCOLLECT = 2;

const int LUA_GCCOUNT = 3;

const int LUA_GCCOUNTB = 4;

const int LUA_GCSTEP = 5;

const int LUA_GCSETPAUSE = 6;

const int LUA_GCSETSTEPMUL = 7;

const int LUA_GCISRUNNING = 9;

const int LUA_GCGEN = 10;

const int LUA_GCINC = 11;

const int LUA_NUMTAGS = 9;

const int LUA_HOOKCALL = 0;

const int LUA_HOOKRET = 1;

const int LUA_HOOKLINE = 2;

const int LUA_HOOKCOUNT = 3;

const int LUA_HOOKTAILCALL = 4;

const int LUA_MASKCALL = 1;

const int LUA_MASKRET = 2;

const int LUA_MASKLINE = 4;

const int LUA_MASKCOUNT = 8;

const String LUA_VERSUFFIX = '_5_4';

const String LUA_COLIBNAME = 'coroutine';

const String LUA_TABLIBNAME = 'table';

const String LUA_IOLIBNAME = 'io';

const String LUA_OSLIBNAME = 'os';

const String LUA_STRLIBNAME = 'string';

const String LUA_UTF8LIBNAME = 'utf8';

const String LUA_MATHLIBNAME = 'math';

const String LUA_DBLIBNAME = 'debug';

const String LUA_LOADLIBNAME = 'package';

const int _STDIO_H = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int _BITS_STDIO_LIM_H = 1;

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const String LUA_GNAME = '_G';

const int LUA_ERRFILE = 6;

const String LUA_LOADED_TABLE = '_LOADED';

const String LUA_PRELOAD_TABLE = '_PRELOAD';

const int LUAL_NUMSIZES = 136;

const int LUA_NOREF = -2;

const int LUA_REFNIL = -1;

const String LUA_FILEHANDLE = 'FILE*';

typedef lua_Alloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Uint64,
);

typedef _c_lua_newstate = ffi.Pointer<lua_State> Function(
  ffi.Pointer<ffi.NativeFunction<lua_Alloc>> f,
  ffi.Pointer<ffi.Void> ud,
);

typedef _dart_lua_newstate = ffi.Pointer<lua_State> Function(
  ffi.Pointer<ffi.NativeFunction<lua_Alloc>> f,
  ffi.Pointer<ffi.Void> ud,
);

typedef _c_lua_close = ffi.Void Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_lua_close = void Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_lua_newthread = ffi.Pointer<lua_State> Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_lua_newthread = ffi.Pointer<lua_State> Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_lua_resetthread = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_lua_resetthread = int Function(
  ffi.Pointer<lua_State> L,
);

typedef lua_CFunction = ffi.Int32 Function(
  ffi.Pointer<lua_State>,
);

typedef _c_lua_atpanic = ffi.Pointer<ffi.NativeFunction<lua_CFunction>>
    Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.NativeFunction<lua_CFunction>> panicf,
);

typedef _dart_lua_atpanic = ffi.Pointer<ffi.NativeFunction<lua_CFunction>>
    Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.NativeFunction<lua_CFunction>> panicf,
);

typedef _c_lua_version = ffi.Double Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_lua_version = double Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_lua_absindex = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_absindex = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_gettop = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_lua_gettop = int Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_lua_settop = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_settop = void Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_pushvalue = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_pushvalue = void Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_rotate = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
  ffi.Int32 n,
);

typedef _dart_lua_rotate = void Function(
  ffi.Pointer<lua_State> L,
  int idx,
  int n,
);

typedef _c_lua_copy = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 fromidx,
  ffi.Int32 toidx,
);

typedef _dart_lua_copy = void Function(
  ffi.Pointer<lua_State> L,
  int fromidx,
  int toidx,
);

typedef _c_lua_checkstack = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 n,
);

typedef _dart_lua_checkstack = int Function(
  ffi.Pointer<lua_State> L,
  int n,
);

typedef _c_lua_xmove = ffi.Void Function(
  ffi.Pointer<lua_State> from,
  ffi.Pointer<lua_State> to,
  ffi.Int32 n,
);

typedef _dart_lua_xmove = void Function(
  ffi.Pointer<lua_State> from,
  ffi.Pointer<lua_State> to,
  int n,
);

typedef _c_lua_isnumber = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_isnumber = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_isstring = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_isstring = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_iscfunction = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_iscfunction = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_isinteger = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_isinteger = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_isuserdata = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_isuserdata = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_type = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_type = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_typename = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 tp,
);

typedef _dart_lua_typename = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  int tp,
);

typedef _c_lua_tonumberx = ffi.Double Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
  ffi.Pointer<ffi.Int32> isnum,
);

typedef _dart_lua_tonumberx = double Function(
  ffi.Pointer<lua_State> L,
  int idx,
  ffi.Pointer<ffi.Int32> isnum,
);

typedef _c_lua_tointegerx = ffi.Int64 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
  ffi.Pointer<ffi.Int32> isnum,
);

typedef _dart_lua_tointegerx = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
  ffi.Pointer<ffi.Int32> isnum,
);

typedef _c_lua_toboolean = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_toboolean = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_tolstring = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
  ffi.Pointer<ffi.Uint64> len,
);

typedef _dart_lua_tolstring = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  int idx,
  ffi.Pointer<ffi.Uint64> len,
);

typedef _c_lua_rawlen = ffi.Uint64 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_rawlen = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_tocfunction = ffi.Pointer<ffi.NativeFunction<lua_CFunction>>
    Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_tocfunction = ffi.Pointer<ffi.NativeFunction<lua_CFunction>>
    Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_touserdata = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_touserdata = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_tothread = ffi.Pointer<lua_State> Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_tothread = ffi.Pointer<lua_State> Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_topointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_topointer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_arith = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 op,
);

typedef _dart_lua_arith = void Function(
  ffi.Pointer<lua_State> L,
  int op,
);

typedef _c_lua_rawequal = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx1,
  ffi.Int32 idx2,
);

typedef _dart_lua_rawequal = int Function(
  ffi.Pointer<lua_State> L,
  int idx1,
  int idx2,
);

typedef _c_lua_compare = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx1,
  ffi.Int32 idx2,
  ffi.Int32 op,
);

typedef _dart_lua_compare = int Function(
  ffi.Pointer<lua_State> L,
  int idx1,
  int idx2,
  int op,
);

typedef _c_lua_pushnil = ffi.Void Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_lua_pushnil = void Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_lua_pushnumber = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Double n,
);

typedef _dart_lua_pushnumber = void Function(
  ffi.Pointer<lua_State> L,
  double n,
);

typedef _c_lua_pushinteger = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int64 n,
);

typedef _dart_lua_pushinteger = void Function(
  ffi.Pointer<lua_State> L,
  int n,
);

typedef _c_lua_pushlstring = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> s,
  ffi.Uint64 len,
);

typedef _dart_lua_pushlstring = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> s,
  int len,
);

typedef _c_lua_pushstring = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> s,
);

typedef _dart_lua_pushstring = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> s,
);

typedef _c_lua_pushvfstring = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> fmt,
  ffi.Int32 argp,
);

typedef _dart_lua_pushvfstring = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> fmt,
  int argp,
);

typedef _c_lua_pushfstring = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_lua_pushfstring = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_lua_pushcclosure = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.NativeFunction<lua_CFunction>> fn,
  ffi.Int32 n,
);

typedef _dart_lua_pushcclosure = void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.NativeFunction<lua_CFunction>> fn,
  int n,
);

typedef _c_lua_pushboolean = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 b,
);

typedef _dart_lua_pushboolean = void Function(
  ffi.Pointer<lua_State> L,
  int b,
);

typedef _c_lua_pushlightuserdata = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Void> p,
);

typedef _dart_lua_pushlightuserdata = void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Void> p,
);

typedef _c_lua_pushthread = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_lua_pushthread = int Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_lua_getglobal = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_lua_getglobal = int Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_lua_gettable = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_gettable = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_getfield = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
  ffi.Pointer<ffi.Int8> k,
);

typedef _dart_lua_getfield = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
  ffi.Pointer<ffi.Int8> k,
);

typedef _c_lua_geti = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
  ffi.Int64 n,
);

typedef _dart_lua_geti = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
  int n,
);

typedef _c_lua_rawget = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_rawget = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_rawgeti = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
  ffi.Int64 n,
);

typedef _dart_lua_rawgeti = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
  int n,
);

typedef _c_lua_rawgetp = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
  ffi.Pointer<ffi.Void> p,
);

typedef _dart_lua_rawgetp = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
  ffi.Pointer<ffi.Void> p,
);

typedef _c_lua_createtable = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 narr,
  ffi.Int32 nrec,
);

typedef _dart_lua_createtable = void Function(
  ffi.Pointer<lua_State> L,
  int narr,
  int nrec,
);

typedef _c_lua_newuserdatauv = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<lua_State> L,
  ffi.Uint64 sz,
  ffi.Int32 nuvalue,
);

typedef _dart_lua_newuserdatauv = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<lua_State> L,
  int sz,
  int nuvalue,
);

typedef _c_lua_getmetatable = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 objindex,
);

typedef _dart_lua_getmetatable = int Function(
  ffi.Pointer<lua_State> L,
  int objindex,
);

typedef _c_lua_getiuservalue = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
  ffi.Int32 n,
);

typedef _dart_lua_getiuservalue = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
  int n,
);

typedef _c_lua_setglobal = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_lua_setglobal = void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_lua_settable = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_settable = void Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_setfield = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
  ffi.Pointer<ffi.Int8> k,
);

typedef _dart_lua_setfield = void Function(
  ffi.Pointer<lua_State> L,
  int idx,
  ffi.Pointer<ffi.Int8> k,
);

typedef _c_lua_seti = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
  ffi.Int64 n,
);

typedef _dart_lua_seti = void Function(
  ffi.Pointer<lua_State> L,
  int idx,
  int n,
);

typedef _c_lua_rawset = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_rawset = void Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_rawseti = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
  ffi.Int64 n,
);

typedef _dart_lua_rawseti = void Function(
  ffi.Pointer<lua_State> L,
  int idx,
  int n,
);

typedef _c_lua_rawsetp = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
  ffi.Pointer<ffi.Void> p,
);

typedef _dart_lua_rawsetp = void Function(
  ffi.Pointer<lua_State> L,
  int idx,
  ffi.Pointer<ffi.Void> p,
);

typedef _c_lua_setmetatable = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 objindex,
);

typedef _dart_lua_setmetatable = int Function(
  ffi.Pointer<lua_State> L,
  int objindex,
);

typedef _c_lua_setiuservalue = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
  ffi.Int32 n,
);

typedef _dart_lua_setiuservalue = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
  int n,
);

typedef lua_KFunction = ffi.Int32 Function(
  ffi.Pointer<lua_State>,
  ffi.Int32,
  ffi.IntPtr,
);

typedef _c_lua_callk = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 nargs,
  ffi.Int32 nresults,
  ffi.IntPtr ctx,
  ffi.Pointer<ffi.NativeFunction<lua_KFunction>> k,
);

typedef _dart_lua_callk = void Function(
  ffi.Pointer<lua_State> L,
  int nargs,
  int nresults,
  int ctx,
  ffi.Pointer<ffi.NativeFunction<lua_KFunction>> k,
);

typedef _c_lua_pcallk = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 nargs,
  ffi.Int32 nresults,
  ffi.Int32 errfunc,
  ffi.IntPtr ctx,
  ffi.Pointer<ffi.NativeFunction<lua_KFunction>> k,
);

typedef _dart_lua_pcallk = int Function(
  ffi.Pointer<lua_State> L,
  int nargs,
  int nresults,
  int errfunc,
  int ctx,
  ffi.Pointer<ffi.NativeFunction<lua_KFunction>> k,
);

typedef lua_Reader = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Uint64>,
);

typedef _c_lua_load = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.NativeFunction<lua_Reader>> reader,
  ffi.Pointer<ffi.Void> dt,
  ffi.Pointer<ffi.Int8> chunkname,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _dart_lua_load = int Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.NativeFunction<lua_Reader>> reader,
  ffi.Pointer<ffi.Void> dt,
  ffi.Pointer<ffi.Int8> chunkname,
  ffi.Pointer<ffi.Int8> mode,
);

typedef lua_Writer = ffi.Int32 Function(
  ffi.Pointer<lua_State>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
);

typedef _c_lua_dump = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.NativeFunction<lua_Writer>> writer,
  ffi.Pointer<ffi.Void> data,
  ffi.Int32 strip,
);

typedef _dart_lua_dump = int Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.NativeFunction<lua_Writer>> writer,
  ffi.Pointer<ffi.Void> data,
  int strip,
);

typedef _c_lua_yieldk = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 nresults,
  ffi.IntPtr ctx,
  ffi.Pointer<ffi.NativeFunction<lua_KFunction>> k,
);

typedef _dart_lua_yieldk = int Function(
  ffi.Pointer<lua_State> L,
  int nresults,
  int ctx,
  ffi.Pointer<ffi.NativeFunction<lua_KFunction>> k,
);

typedef _c_lua_resume = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<lua_State> from,
  ffi.Int32 narg,
  ffi.Pointer<ffi.Int32> nres,
);

typedef _dart_lua_resume = int Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<lua_State> from,
  int narg,
  ffi.Pointer<ffi.Int32> nres,
);

typedef _c_lua_status = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_lua_status = int Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_lua_isyieldable = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_lua_isyieldable = int Function(
  ffi.Pointer<lua_State> L,
);

typedef lua_WarnFunction = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _c_lua_setwarnf = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.NativeFunction<lua_WarnFunction>> f,
  ffi.Pointer<ffi.Void> ud,
);

typedef _dart_lua_setwarnf = void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.NativeFunction<lua_WarnFunction>> f,
  ffi.Pointer<ffi.Void> ud,
);

typedef _c_lua_warning = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> msg,
  ffi.Int32 tocont,
);

typedef _dart_lua_warning = void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> msg,
  int tocont,
);

typedef _c_lua_gc = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 what,
);

typedef _dart_lua_gc = int Function(
  ffi.Pointer<lua_State> L,
  int what,
);

typedef _c_lua_error = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_lua_error = int Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_lua_next = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_next = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_concat = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 n,
);

typedef _dart_lua_concat = void Function(
  ffi.Pointer<lua_State> L,
  int n,
);

typedef _c_lua_len = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_len = void Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_stringtonumber = ffi.Uint64 Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> s,
);

typedef _dart_lua_stringtonumber = int Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> s,
);

typedef _c_lua_getallocf = ffi.Pointer<ffi.NativeFunction<lua_Alloc>> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ud,
);

typedef _dart_lua_getallocf = ffi.Pointer<ffi.NativeFunction<lua_Alloc>>
    Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ud,
);

typedef _c_lua_setallocf = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.NativeFunction<lua_Alloc>> f,
  ffi.Pointer<ffi.Void> ud,
);

typedef _dart_lua_setallocf = void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.NativeFunction<lua_Alloc>> f,
  ffi.Pointer<ffi.Void> ud,
);

typedef _c_lua_toclose = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_lua_toclose = void Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_lua_getstack = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 level,
  ffi.Pointer<lua_Debug> ar,
);

typedef _dart_lua_getstack = int Function(
  ffi.Pointer<lua_State> L,
  int level,
  ffi.Pointer<lua_Debug> ar,
);

typedef _c_lua_getinfo = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> what,
  ffi.Pointer<lua_Debug> ar,
);

typedef _dart_lua_getinfo = int Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> what,
  ffi.Pointer<lua_Debug> ar,
);

typedef _c_lua_getlocal = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<lua_Debug> ar,
  ffi.Int32 n,
);

typedef _dart_lua_getlocal = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<lua_Debug> ar,
  int n,
);

typedef _c_lua_setlocal = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<lua_Debug> ar,
  ffi.Int32 n,
);

typedef _dart_lua_setlocal = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<lua_Debug> ar,
  int n,
);

typedef _c_lua_getupvalue = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 funcindex,
  ffi.Int32 n,
);

typedef _dart_lua_getupvalue = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  int funcindex,
  int n,
);

typedef _c_lua_setupvalue = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 funcindex,
  ffi.Int32 n,
);

typedef _dart_lua_setupvalue = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  int funcindex,
  int n,
);

typedef _c_lua_upvalueid = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 fidx,
  ffi.Int32 n,
);

typedef _dart_lua_upvalueid = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<lua_State> L,
  int fidx,
  int n,
);

typedef _c_lua_upvaluejoin = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 fidx1,
  ffi.Int32 n1,
  ffi.Int32 fidx2,
  ffi.Int32 n2,
);

typedef _dart_lua_upvaluejoin = void Function(
  ffi.Pointer<lua_State> L,
  int fidx1,
  int n1,
  int fidx2,
  int n2,
);

typedef lua_Hook = ffi.Void Function(
  ffi.Pointer<lua_State>,
  ffi.Pointer<lua_Debug>,
);

typedef _c_lua_sethook = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.NativeFunction<lua_Hook>> func,
  ffi.Int32 mask,
  ffi.Int32 count,
);

typedef _dart_lua_sethook = void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.NativeFunction<lua_Hook>> func,
  int mask,
  int count,
);

typedef _c_lua_gethook = ffi.Pointer<ffi.NativeFunction<lua_Hook>> Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_lua_gethook = ffi.Pointer<ffi.NativeFunction<lua_Hook>> Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_lua_gethookmask = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_lua_gethookmask = int Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_lua_gethookcount = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_lua_gethookcount = int Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_lua_setcstacklimit = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Uint32 limit,
);

typedef _dart_lua_setcstacklimit = int Function(
  ffi.Pointer<lua_State> L,
  int limit,
);

typedef _c_luaopen_base = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_luaopen_base = int Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_luaopen_coroutine = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_luaopen_coroutine = int Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_luaopen_table = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_luaopen_table = int Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_luaopen_io = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_luaopen_io = int Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_luaopen_os = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_luaopen_os = int Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_luaopen_string = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_luaopen_string = int Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_luaopen_utf8 = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_luaopen_utf8 = int Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_luaopen_math = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_luaopen_math = int Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_luaopen_debug = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_luaopen_debug = int Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_luaopen_package = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_luaopen_package = int Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_luaL_openlibs = ffi.Void Function(
  ffi.Pointer<lua_State> L,
);

typedef _dart_luaL_openlibs = void Function(
  ffi.Pointer<lua_State> L,
);

typedef _c_remove = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __filename,
);

typedef _dart_remove = int Function(
  ffi.Pointer<ffi.Int8> __filename,
);

typedef _c_rename = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __old,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _dart_rename = int Function(
  ffi.Pointer<ffi.Int8> __old,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _c_renameat = ffi.Int32 Function(
  ffi.Int32 __oldfd,
  ffi.Pointer<ffi.Int8> __old,
  ffi.Int32 __newfd,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _dart_renameat = int Function(
  int __oldfd,
  ffi.Pointer<ffi.Int8> __old,
  int __newfd,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _c_tmpfile = ffi.Pointer<_IO_FILE> Function();

typedef _dart_tmpfile = ffi.Pointer<_IO_FILE> Function();

typedef _c_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_tmpnam_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_tmpnam_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dir,
  ffi.Pointer<ffi.Int8> __pfx,
);

typedef _dart_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dir,
  ffi.Pointer<ffi.Int8> __pfx,
);

typedef _c_fclose = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fclose = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fflush = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fflush = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fflush_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fflush_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_fopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_freopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_freopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fdopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_fdopen = ffi.Pointer<_IO_FILE> Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_fmemopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Uint64 __len,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_fmemopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Void> __s,
  int __len,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_open_memstream = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
  ffi.Pointer<ffi.Uint64> __sizeloc,
);

typedef _dart_open_memstream = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
  ffi.Pointer<ffi.Uint64> __sizeloc,
);

typedef _c_setbuf = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_setbuf = void Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_setvbuf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Int32 __modes,
  ffi.Uint64 __n,
);

typedef _dart_setvbuf = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  int __modes,
  int __n,
);

typedef _c_setbuffer = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __size,
);

typedef _dart_setbuffer = void Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  int __size,
);

typedef _c_setlinebuf = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_setlinebuf = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fprintf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_fprintf = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_printf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_printf = int Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_sprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_sprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vfprintf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vfprintf = int Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vprintf = int Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vsprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vsprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_snprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __maxlen,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_snprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __maxlen,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vsnprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __maxlen,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vsnprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __maxlen,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vdprintf = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __fmt,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vdprintf = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __fmt,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_dprintf = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __fmt,
);

typedef _dart_dprintf = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __fmt,
);

typedef _c_fscanf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_fscanf = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_scanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_scanf = int Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_sscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_sscanf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vfscanf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vfscanf = int Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vscanf = int Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vsscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vsscanf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_fgetc = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fgetc = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getc = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getc = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getchar = ffi.Int32 Function();

typedef _dart_getchar = int Function();

typedef _c_getc_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getc_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getchar_unlocked = ffi.Int32 Function();

typedef _dart_getchar_unlocked = int Function();

typedef _c_fgetc_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fgetc_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fputc = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fputc = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putc = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_putc = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putchar = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_putchar = int Function(
  int __c,
);

typedef _c_fputc_unlocked = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fputc_unlocked = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putc_unlocked = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_putc_unlocked = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putchar_unlocked = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_putchar_unlocked = int Function(
  int __c,
);

typedef _c_getw = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getw = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putw = ffi.Int32 Function(
  ffi.Int32 __w,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_putw = int Function(
  int __w,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c___getdelim = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  ffi.Int32 __delimiter,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart___getdelim = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  int __delimiter,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getdelim = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  ffi.Int32 __delimiter,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getdelim = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  int __delimiter,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getline = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getline = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fputs = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fputs = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_puts = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_puts = int Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_ungetc = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ungetc = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fread = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fread = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fwrite = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __n,
  ffi.Pointer<_IO_FILE> __s,
);

typedef _dart_fwrite = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<_IO_FILE> __s,
);

typedef _c_fread_unlocked = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fread_unlocked = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fwrite_unlocked = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fwrite_unlocked = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fseek = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Int64 __off,
  ffi.Int32 __whence,
);

typedef _dart_fseek = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  int __off,
  int __whence,
);

typedef _c_ftell = ffi.Int64 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ftell = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_rewind = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_rewind = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fseeko = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Int64 __off,
  ffi.Int32 __whence,
);

typedef _dart_fseeko = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  int __off,
  int __whence,
);

typedef _c_ftello = ffi.Int64 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ftello = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fgetpos = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<__fpos_t> __pos,
);

typedef _dart_fgetpos = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<__fpos_t> __pos,
);

typedef _c_fsetpos = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<__fpos_t> __pos,
);

typedef _dart_fsetpos = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<__fpos_t> __pos,
);

typedef _c_clearerr = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_clearerr = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_feof = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_feof = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ferror = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ferror = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_clearerr_unlocked = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_clearerr_unlocked = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_feof_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_feof_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ferror_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ferror_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_perror = ffi.Void Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_perror = void Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_fileno = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fileno = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fileno_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fileno_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_popen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __command,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_popen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __command,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_pclose = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_pclose = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_flockfile = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_flockfile = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ftrylockfile = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ftrylockfile = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_funlockfile = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_funlockfile = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c___uflow = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> arg0,
);

typedef _dart___uflow = int Function(
  ffi.Pointer<_IO_FILE> arg0,
);

typedef _c___overflow = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> arg0,
  ffi.Int32 arg1,
);

typedef _dart___overflow = int Function(
  ffi.Pointer<_IO_FILE> arg0,
  int arg1,
);

typedef _c_luaL_checkversion_ = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Double ver,
  ffi.Uint64 sz,
);

typedef _dart_luaL_checkversion_ = void Function(
  ffi.Pointer<lua_State> L,
  double ver,
  int sz,
);

typedef _c_luaL_getmetafield = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 obj,
  ffi.Pointer<ffi.Int8> e,
);

typedef _dart_luaL_getmetafield = int Function(
  ffi.Pointer<lua_State> L,
  int obj,
  ffi.Pointer<ffi.Int8> e,
);

typedef _c_luaL_callmeta = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 obj,
  ffi.Pointer<ffi.Int8> e,
);

typedef _dart_luaL_callmeta = int Function(
  ffi.Pointer<lua_State> L,
  int obj,
  ffi.Pointer<ffi.Int8> e,
);

typedef _c_luaL_tolstring = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
  ffi.Pointer<ffi.Uint64> len,
);

typedef _dart_luaL_tolstring = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  int idx,
  ffi.Pointer<ffi.Uint64> len,
);

typedef _c_luaL_argerror = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 arg,
  ffi.Pointer<ffi.Int8> extramsg,
);

typedef _dart_luaL_argerror = int Function(
  ffi.Pointer<lua_State> L,
  int arg,
  ffi.Pointer<ffi.Int8> extramsg,
);

typedef _c_luaL_typeerror = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 arg,
  ffi.Pointer<ffi.Int8> tname,
);

typedef _dart_luaL_typeerror = int Function(
  ffi.Pointer<lua_State> L,
  int arg,
  ffi.Pointer<ffi.Int8> tname,
);

typedef _c_luaL_checklstring = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 arg,
  ffi.Pointer<ffi.Uint64> l,
);

typedef _dart_luaL_checklstring = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  int arg,
  ffi.Pointer<ffi.Uint64> l,
);

typedef _c_luaL_optlstring = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 arg,
  ffi.Pointer<ffi.Int8> def,
  ffi.Pointer<ffi.Uint64> l,
);

typedef _dart_luaL_optlstring = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  int arg,
  ffi.Pointer<ffi.Int8> def,
  ffi.Pointer<ffi.Uint64> l,
);

typedef _c_luaL_checknumber = ffi.Double Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 arg,
);

typedef _dart_luaL_checknumber = double Function(
  ffi.Pointer<lua_State> L,
  int arg,
);

typedef _c_luaL_optnumber = ffi.Double Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 arg,
  ffi.Double def,
);

typedef _dart_luaL_optnumber = double Function(
  ffi.Pointer<lua_State> L,
  int arg,
  double def,
);

typedef _c_luaL_checkinteger = ffi.Int64 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 arg,
);

typedef _dart_luaL_checkinteger = int Function(
  ffi.Pointer<lua_State> L,
  int arg,
);

typedef _c_luaL_optinteger = ffi.Int64 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 arg,
  ffi.Int64 def,
);

typedef _dart_luaL_optinteger = int Function(
  ffi.Pointer<lua_State> L,
  int arg,
  int def,
);

typedef _c_luaL_checkstack = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 sz,
  ffi.Pointer<ffi.Int8> msg,
);

typedef _dart_luaL_checkstack = void Function(
  ffi.Pointer<lua_State> L,
  int sz,
  ffi.Pointer<ffi.Int8> msg,
);

typedef _c_luaL_checktype = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 arg,
  ffi.Int32 t,
);

typedef _dart_luaL_checktype = void Function(
  ffi.Pointer<lua_State> L,
  int arg,
  int t,
);

typedef _c_luaL_checkany = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 arg,
);

typedef _dart_luaL_checkany = void Function(
  ffi.Pointer<lua_State> L,
  int arg,
);

typedef _c_luaL_newmetatable = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> tname,
);

typedef _dart_luaL_newmetatable = int Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> tname,
);

typedef _c_luaL_setmetatable = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> tname,
);

typedef _dart_luaL_setmetatable = void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> tname,
);

typedef _c_luaL_testudata = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 ud,
  ffi.Pointer<ffi.Int8> tname,
);

typedef _dart_luaL_testudata = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<lua_State> L,
  int ud,
  ffi.Pointer<ffi.Int8> tname,
);

typedef _c_luaL_checkudata = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 ud,
  ffi.Pointer<ffi.Int8> tname,
);

typedef _dart_luaL_checkudata = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<lua_State> L,
  int ud,
  ffi.Pointer<ffi.Int8> tname,
);

typedef _c_luaL_where = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 lvl,
);

typedef _dart_luaL_where = void Function(
  ffi.Pointer<lua_State> L,
  int lvl,
);

typedef _c_luaL_error = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_luaL_error = int Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_luaL_checkoption = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 arg,
  ffi.Pointer<ffi.Int8> def,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> lst,
);

typedef _dart_luaL_checkoption = int Function(
  ffi.Pointer<lua_State> L,
  int arg,
  ffi.Pointer<ffi.Int8> def,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> lst,
);

typedef _c_luaL_fileresult = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 stat,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_luaL_fileresult = int Function(
  ffi.Pointer<lua_State> L,
  int stat,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_luaL_execresult = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 stat,
);

typedef _dart_luaL_execresult = int Function(
  ffi.Pointer<lua_State> L,
  int stat,
);

typedef _c_luaL_ref = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 t,
);

typedef _dart_luaL_ref = int Function(
  ffi.Pointer<lua_State> L,
  int t,
);

typedef _c_luaL_unref = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 t,
  ffi.Int32 ref,
);

typedef _dart_luaL_unref = void Function(
  ffi.Pointer<lua_State> L,
  int t,
  int ref,
);

typedef _c_luaL_loadfilex = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _dart_luaL_loadfilex = int Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _c_luaL_loadbufferx = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> buff,
  ffi.Uint64 sz,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _dart_luaL_loadbufferx = int Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> buff,
  int sz,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> mode,
);

typedef _c_luaL_loadstring = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> s,
);

typedef _dart_luaL_loadstring = int Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> s,
);

typedef _c_luaL_newstate = ffi.Pointer<lua_State> Function();

typedef _dart_luaL_newstate = ffi.Pointer<lua_State> Function();

typedef _c_luaL_len = ffi.Int64 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
);

typedef _dart_luaL_len = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
);

typedef _c_luaL_addgsub = ffi.Void Function(
  ffi.Pointer<luaL_Buffer> b,
  ffi.Pointer<ffi.Int8> s,
  ffi.Pointer<ffi.Int8> p,
  ffi.Pointer<ffi.Int8> r,
);

typedef _dart_luaL_addgsub = void Function(
  ffi.Pointer<luaL_Buffer> b,
  ffi.Pointer<ffi.Int8> s,
  ffi.Pointer<ffi.Int8> p,
  ffi.Pointer<ffi.Int8> r,
);

typedef _c_luaL_gsub = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> s,
  ffi.Pointer<ffi.Int8> p,
  ffi.Pointer<ffi.Int8> r,
);

typedef _dart_luaL_gsub = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> s,
  ffi.Pointer<ffi.Int8> p,
  ffi.Pointer<ffi.Int8> r,
);

typedef _c_luaL_setfuncs = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<luaL_Reg> l,
  ffi.Int32 nup,
);

typedef _dart_luaL_setfuncs = void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<luaL_Reg> l,
  int nup,
);

typedef _c_luaL_getsubtable = ffi.Int32 Function(
  ffi.Pointer<lua_State> L,
  ffi.Int32 idx,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_luaL_getsubtable = int Function(
  ffi.Pointer<lua_State> L,
  int idx,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_luaL_traceback = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<lua_State> L1,
  ffi.Pointer<ffi.Int8> msg,
  ffi.Int32 level,
);

typedef _dart_luaL_traceback = void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<lua_State> L1,
  ffi.Pointer<ffi.Int8> msg,
  int level,
);

typedef _c_luaL_requiref = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> modname,
  ffi.Pointer<ffi.NativeFunction<lua_CFunction>> openf,
  ffi.Int32 glb,
);

typedef _dart_luaL_requiref = void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<ffi.Int8> modname,
  ffi.Pointer<ffi.NativeFunction<lua_CFunction>> openf,
  int glb,
);

typedef _c_luaL_buffinit = ffi.Void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<luaL_Buffer> B,
);

typedef _dart_luaL_buffinit = void Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<luaL_Buffer> B,
);

typedef _c_luaL_prepbuffsize = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<luaL_Buffer> B,
  ffi.Uint64 sz,
);

typedef _dart_luaL_prepbuffsize = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<luaL_Buffer> B,
  int sz,
);

typedef _c_luaL_addlstring = ffi.Void Function(
  ffi.Pointer<luaL_Buffer> B,
  ffi.Pointer<ffi.Int8> s,
  ffi.Uint64 l,
);

typedef _dart_luaL_addlstring = void Function(
  ffi.Pointer<luaL_Buffer> B,
  ffi.Pointer<ffi.Int8> s,
  int l,
);

typedef _c_luaL_addstring = ffi.Void Function(
  ffi.Pointer<luaL_Buffer> B,
  ffi.Pointer<ffi.Int8> s,
);

typedef _dart_luaL_addstring = void Function(
  ffi.Pointer<luaL_Buffer> B,
  ffi.Pointer<ffi.Int8> s,
);

typedef _c_luaL_addvalue = ffi.Void Function(
  ffi.Pointer<luaL_Buffer> B,
);

typedef _dart_luaL_addvalue = void Function(
  ffi.Pointer<luaL_Buffer> B,
);

typedef _c_luaL_pushresult = ffi.Void Function(
  ffi.Pointer<luaL_Buffer> B,
);

typedef _dart_luaL_pushresult = void Function(
  ffi.Pointer<luaL_Buffer> B,
);

typedef _c_luaL_pushresultsize = ffi.Void Function(
  ffi.Pointer<luaL_Buffer> B,
  ffi.Uint64 sz,
);

typedef _dart_luaL_pushresultsize = void Function(
  ffi.Pointer<luaL_Buffer> B,
  int sz,
);

typedef _c_luaL_buffinitsize = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<luaL_Buffer> B,
  ffi.Uint64 sz,
);

typedef _dart_luaL_buffinitsize = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<lua_State> L,
  ffi.Pointer<luaL_Buffer> B,
  int sz,
);

typedef _c_setup_game_state = GameState Function(
  ffi.Pointer<lua_State> state,
);

typedef _dart_setup_game_state = GameState Function(
  ffi.Pointer<lua_State> state,
);

typedef _c_move_right_thirty = ffi.Void Function(
  ffi.Pointer<lua_State> state,
);

typedef _dart_move_right_thirty = void Function(
  ffi.Pointer<lua_State> state,
);

typedef _c_register_functions = ffi.Void Function(
  ffi.Pointer<lua_State> state,
);

typedef _dart_register_functions = void Function(
  ffi.Pointer<lua_State> state,
);

typedef _c_setup_globals = ffi.Void Function(
  ffi.Pointer<lua_State> state,
);

typedef _dart_setup_globals = void Function(
  ffi.Pointer<lua_State> state,
);

typedef _c_print_stacktrace = ffi.Void Function();

typedef _dart_print_stacktrace = void Function();

typedef _c_check_ok = ffi.Void Function(
  ffi.Int32 is_ok,
  ffi.Pointer<lua_State> state,
);

typedef _dart_check_ok = void Function(
  int is_ok,
  ffi.Pointer<lua_State> state,
);

typedef _c_lua_flame_plugin_get_type = ffi.Int32 Function();

typedef _dart_lua_flame_plugin_get_type = int Function();

typedef _c_lua_flame_plugin_register_with_registrar = ffi.Void Function(
  ffi.Pointer<ffi.Int32> registrar,
);

typedef _dart_lua_flame_plugin_register_with_registrar = void Function(
  ffi.Pointer<ffi.Int32> registrar,
);
